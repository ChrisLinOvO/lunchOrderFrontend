{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport RowComponent from './tree/row';\nimport CellComponent from './tree/cell';\nimport { statics } from './util';\n\nvar noop = function noop() {};\n\nexport default function tree(BaseComponent) {\n  var _class, _temp;\n\n  var TreeTable = (_temp = _class = function (_React$Component) {\n    _inherits(TreeTable, _React$Component);\n\n    function TreeTable(props, context) {\n      _classCallCheck(this, TreeTable);\n\n      var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n      _this.onTreeNodeClick = function (record) {\n        var primaryKey = _this.props.primaryKey,\n            id = record[primaryKey],\n            dataSource = _this.ds,\n            openRowKeys = [].concat(_this.state.openRowKeys),\n            index = openRowKeys.indexOf(id),\n            getChildrenKeyById = function getChildrenKeyById(id) {\n          var ret = [id];\n\n          var loop = function loop(data) {\n            data.forEach(function (item) {\n              ret.push(item[primaryKey]);\n\n              if (item.children) {\n                loop(item.children);\n              }\n            });\n          };\n\n          dataSource.forEach(function (item) {\n            if (item[primaryKey] === id) {\n              if (item.children) {\n                loop(item.children);\n              }\n            }\n          });\n          return ret;\n        };\n\n        if (index > -1) {\n          // 不仅要删除当前的openRowKey，还需要删除关联子节点的openRowKey\n          var ids = getChildrenKeyById(id);\n          ids.forEach(function (id) {\n            var i = openRowKeys.indexOf(id);\n\n            if (i > -1) {\n              openRowKeys.splice(i, 1);\n            }\n          });\n        } else {\n          openRowKeys.push(id);\n        }\n\n        if (!('openRowKeys' in _this.props)) {\n          _this.setState({\n            openRowKeys: openRowKeys\n          });\n        }\n\n        _this.props.onRowOpen(openRowKeys, id, index === -1, record);\n      };\n\n      _this.state = {\n        openRowKeys: props.openRowKeys || props.defaultOpenRowKeys || []\n      };\n      return _this;\n    }\n\n    TreeTable.prototype.getChildContext = function getChildContext() {\n      return {\n        openTreeRowKeys: this.state.openRowKeys,\n        indent: this.props.indent,\n        treeStatus: this.getTreeNodeStatus(this.ds),\n        onTreeNodeClick: this.onTreeNodeClick,\n        isTree: this.props.isTree\n      };\n    };\n\n    TreeTable.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {\n      if ('openRowKeys' in nextProps) {\n        return {\n          openRowKeys: nextProps.openRowKeys || []\n        };\n      }\n\n      return null;\n    };\n\n    TreeTable.prototype.normalizeDataSource = function normalizeDataSource(dataSource) {\n      var ret = [],\n          loop = function loop(dataSource, level) {\n        dataSource.forEach(function (item) {\n          item.__level = level;\n          ret.push(item);\n\n          if (item.children) {\n            loop(item.children, level + 1);\n          }\n        });\n      };\n\n      loop(dataSource, 0);\n      this.ds = ret;\n      return ret;\n    };\n\n    TreeTable.prototype.getTreeNodeStatus = function getTreeNodeStatus() {\n      var dataSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var openRowKeys = this.state.openRowKeys,\n          primaryKey = this.props.primaryKey,\n          ret = [];\n      openRowKeys.forEach(function (openKey) {\n        dataSource.forEach(function (item) {\n          if (item[primaryKey] === openKey) {\n            if (item.children) {\n              item.children.forEach(function (child) {\n                ret.push(child[primaryKey]);\n              });\n            }\n          }\n        });\n      });\n      return ret;\n    };\n\n    TreeTable.prototype.render = function render() {\n      /* eslint-disable no-unused-vars, prefer-const */\n      var _props = this.props,\n          components = _props.components,\n          isTree = _props.isTree,\n          dataSource = _props.dataSource,\n          indent = _props.indent,\n          others = _objectWithoutProperties(_props, ['components', 'isTree', 'dataSource', 'indent']);\n\n      if (isTree) {\n        components = _extends({}, components);\n\n        if (!components.Row) {\n          components.Row = RowComponent;\n        }\n\n        if (!components.Cell) {\n          components.Cell = CellComponent;\n        }\n\n        dataSource = this.normalizeDataSource(dataSource);\n      }\n\n      return React.createElement(BaseComponent, _extends({}, others, {\n        dataSource: dataSource,\n        components: components\n      }));\n    };\n\n    return TreeTable;\n  }(React.Component), _class.TreeRow = RowComponent, _class.TreeCell = CellComponent, _class.propTypes = _extends({\n    /**\n     * 默认情况下展开的树形表格，传入了此属性代表tree的展开为受控操作\n     */\n    openRowKeys: PropTypes.array,\n\n    /**\n     * 默认情况下展开的 Expand行 或者 Tree行，非受控模式\n     * @version 1.23.22\n     */\n    defaultOpenRowKeys: PropTypes.array,\n\n    /**\n     * 点击tree展开或者关闭的时候触发的事件\n     * @param {Array} openRowKeys tree模式下展开的key\n     * @param {String} currentRowKey 当前点击行的key\n     * @param {Boolean} opened 当前点击是展开还是收起\n     * @param {Object} currentRecord 当前点击行的记录\n     */\n    onRowOpen: PropTypes.func,\n\n    /**\n     * dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中\n     */\n    primaryKey: PropTypes.oneOfType([PropTypes.symbol, PropTypes.string]),\n\n    /**\n     * 在tree模式下的缩进尺寸， 仅在isTree为true时候有效\n     */\n    indent: PropTypes.number,\n\n    /**\n     * 开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table\n     */\n    isTree: PropTypes.bool,\n    locale: PropTypes.object\n  }, BaseComponent.propTypes), _class.defaultProps = _extends({}, BaseComponent.defaultProps, {\n    primaryKey: 'id',\n    onRowOpen: noop,\n    components: {},\n    indent: 12\n  }), _class.childContextTypes = {\n    openTreeRowKeys: PropTypes.array,\n    indent: PropTypes.number,\n    treeStatus: PropTypes.array,\n    onTreeNodeClick: PropTypes.func,\n    isTree: PropTypes.bool\n  }, _temp);\n  TreeTable.displayName = 'TreeTable';\n  statics(TreeTable, BaseComponent);\n  return polyfill(TreeTable);\n}","map":{"version":3,"sources":["/Users/Chris/Project/lunch-order-backstage/node_modules/@alifd/next/es/table/tree.js"],"names":["_extends","_objectWithoutProperties","_classCallCheck","_possibleConstructorReturn","_inherits","React","PropTypes","polyfill","RowComponent","CellComponent","statics","noop","tree","BaseComponent","_class","_temp","TreeTable","_React$Component","props","context","_this","call","onTreeNodeClick","record","primaryKey","id","dataSource","ds","openRowKeys","concat","state","index","indexOf","getChildrenKeyById","ret","loop","data","forEach","item","push","children","ids","i","splice","setState","onRowOpen","defaultOpenRowKeys","prototype","getChildContext","openTreeRowKeys","indent","treeStatus","getTreeNodeStatus","isTree","getDerivedStateFromProps","nextProps","normalizeDataSource","level","__level","arguments","length","undefined","openKey","child","render","_props","components","others","Row","Cell","createElement","Component","TreeRow","TreeCell","propTypes","array","func","oneOfType","symbol","string","number","bool","locale","object","defaultProps","childContextTypes","displayName"],"mappings":"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","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport RowComponent from './tree/row';\nimport CellComponent from './tree/cell';\nimport { statics } from './util';\n\nvar noop = function noop() {};\n\nexport default function tree(BaseComponent) {\n    var _class, _temp;\n\n    var TreeTable = (_temp = _class = function (_React$Component) {\n        _inherits(TreeTable, _React$Component);\n\n        function TreeTable(props, context) {\n            _classCallCheck(this, TreeTable);\n\n            var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n            _this.onTreeNodeClick = function (record) {\n                var primaryKey = _this.props.primaryKey,\n                    id = record[primaryKey],\n                    dataSource = _this.ds,\n                    openRowKeys = [].concat(_this.state.openRowKeys),\n                    index = openRowKeys.indexOf(id),\n                    getChildrenKeyById = function getChildrenKeyById(id) {\n                    var ret = [id];\n                    var loop = function loop(data) {\n                        data.forEach(function (item) {\n                            ret.push(item[primaryKey]);\n                            if (item.children) {\n                                loop(item.children);\n                            }\n                        });\n                    };\n                    dataSource.forEach(function (item) {\n                        if (item[primaryKey] === id) {\n                            if (item.children) {\n                                loop(item.children);\n                            }\n                        }\n                    });\n                    return ret;\n                };\n\n\n                if (index > -1) {\n                    // 不仅要删除当前的openRowKey，还需要删除关联子节点的openRowKey\n                    var ids = getChildrenKeyById(id);\n                    ids.forEach(function (id) {\n                        var i = openRowKeys.indexOf(id);\n                        if (i > -1) {\n                            openRowKeys.splice(i, 1);\n                        }\n                    });\n                } else {\n                    openRowKeys.push(id);\n                }\n\n                if (!('openRowKeys' in _this.props)) {\n                    _this.setState({\n                        openRowKeys: openRowKeys\n                    });\n                }\n                _this.props.onRowOpen(openRowKeys, id, index === -1, record);\n            };\n\n            _this.state = {\n                openRowKeys: props.openRowKeys || props.defaultOpenRowKeys || []\n            };\n            return _this;\n        }\n\n        TreeTable.prototype.getChildContext = function getChildContext() {\n            return {\n                openTreeRowKeys: this.state.openRowKeys,\n                indent: this.props.indent,\n                treeStatus: this.getTreeNodeStatus(this.ds),\n                onTreeNodeClick: this.onTreeNodeClick,\n                isTree: this.props.isTree\n            };\n        };\n\n        TreeTable.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {\n            if ('openRowKeys' in nextProps) {\n                return {\n                    openRowKeys: nextProps.openRowKeys || []\n                };\n            }\n\n            return null;\n        };\n\n        TreeTable.prototype.normalizeDataSource = function normalizeDataSource(dataSource) {\n            var ret = [],\n                loop = function loop(dataSource, level) {\n                dataSource.forEach(function (item) {\n                    item.__level = level;\n                    ret.push(item);\n                    if (item.children) {\n                        loop(item.children, level + 1);\n                    }\n                });\n            };\n            loop(dataSource, 0);\n            this.ds = ret;\n            return ret;\n        };\n\n        TreeTable.prototype.getTreeNodeStatus = function getTreeNodeStatus() {\n            var dataSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n            var openRowKeys = this.state.openRowKeys,\n                primaryKey = this.props.primaryKey,\n                ret = [];\n\n\n            openRowKeys.forEach(function (openKey) {\n                dataSource.forEach(function (item) {\n                    if (item[primaryKey] === openKey) {\n                        if (item.children) {\n                            item.children.forEach(function (child) {\n                                ret.push(child[primaryKey]);\n                            });\n                        }\n                    }\n                });\n            });\n            return ret;\n        };\n\n        TreeTable.prototype.render = function render() {\n            /* eslint-disable no-unused-vars, prefer-const */\n            var _props = this.props,\n                components = _props.components,\n                isTree = _props.isTree,\n                dataSource = _props.dataSource,\n                indent = _props.indent,\n                others = _objectWithoutProperties(_props, ['components', 'isTree', 'dataSource', 'indent']);\n\n            if (isTree) {\n                components = _extends({}, components);\n                if (!components.Row) {\n                    components.Row = RowComponent;\n                }\n                if (!components.Cell) {\n                    components.Cell = CellComponent;\n                }\n\n                dataSource = this.normalizeDataSource(dataSource);\n            }\n            return React.createElement(BaseComponent, _extends({}, others, { dataSource: dataSource, components: components }));\n        };\n\n        return TreeTable;\n    }(React.Component), _class.TreeRow = RowComponent, _class.TreeCell = CellComponent, _class.propTypes = _extends({\n        /**\n         * 默认情况下展开的树形表格，传入了此属性代表tree的展开为受控操作\n         */\n        openRowKeys: PropTypes.array,\n        /**\n         * 默认情况下展开的 Expand行 或者 Tree行，非受控模式\n         * @version 1.23.22\n         */\n        defaultOpenRowKeys: PropTypes.array,\n        /**\n         * 点击tree展开或者关闭的时候触发的事件\n         * @param {Array} openRowKeys tree模式下展开的key\n         * @param {String} currentRowKey 当前点击行的key\n         * @param {Boolean} opened 当前点击是展开还是收起\n         * @param {Object} currentRecord 当前点击行的记录\n         */\n        onRowOpen: PropTypes.func,\n        /**\n         * dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中\n         */\n        primaryKey: PropTypes.oneOfType([PropTypes.symbol, PropTypes.string]),\n        /**\n         * 在tree模式下的缩进尺寸， 仅在isTree为true时候有效\n         */\n        indent: PropTypes.number,\n        /**\n         * 开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table\n         */\n        isTree: PropTypes.bool,\n        locale: PropTypes.object\n    }, BaseComponent.propTypes), _class.defaultProps = _extends({}, BaseComponent.defaultProps, {\n        primaryKey: 'id',\n        onRowOpen: noop,\n        components: {},\n        indent: 12\n    }), _class.childContextTypes = {\n        openTreeRowKeys: PropTypes.array,\n        indent: PropTypes.number,\n        treeStatus: PropTypes.array,\n        onTreeNodeClick: PropTypes.func,\n        isTree: PropTypes.bool\n    }, _temp);\n    TreeTable.displayName = 'TreeTable';\n\n    statics(TreeTable, BaseComponent);\n    return polyfill(TreeTable);\n}"]},"metadata":{},"sourceType":"module"}