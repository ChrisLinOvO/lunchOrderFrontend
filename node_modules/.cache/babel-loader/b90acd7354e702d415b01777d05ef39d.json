{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar util = _interopRequireWildcard(require(\"../util\"));\n/**\n *  Rule for validating minimum and maximum allowed values.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\n\nfunction size(rule, value, errors, options) {\n  var key = null;\n  var isNum = typeof value === 'number';\n  var isStr = typeof value === 'string';\n\n  if (isNum) {\n    key = 'number';\n  } else if (isStr) {\n    key = 'string';\n  }\n\n  if (!key) {\n    return false;\n  } // TODO: 2.x change to typeof rule.min === 'number' || typeof rule.max === 'number'\n\n\n  if (typeof rule.min !== 'undefined' || typeof rule.max !== 'undefined') {\n    var val = value;\n    var max = Number(rule.max);\n    var min = Number(rule.min);\n\n    if (isStr) {\n      val = Number(val);\n    }\n\n    if (val < min) {\n      errors.push(util.format(options.messages[key].min, rule.aliasName || rule.field, rule.min));\n    } else if (val > max) {\n      errors.push(util.format(options.messages[key].max, rule.aliasName || rule.field, rule.max));\n    }\n  }\n}\n\nvar _default = size;\nexports.default = _default;","map":{"version":3,"sources":["/Users/Chris/Project/lunch-order-backstage/node_modules/@alifd/validate/lib/rules/size.js"],"names":["_interopRequireWildcard","require","Object","defineProperty","exports","value","default","util","size","rule","errors","options","key","isNum","isStr","min","max","val","Number","push","format","messages","aliasName","field","_default"],"mappings":"AAAA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,IAAI,GAAGP,uBAAuB,CAACC,OAAO,CAAC,SAAD,CAAR,CAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,IAAT,CAAcC,IAAd,EAAoBJ,KAApB,EAA2BK,MAA3B,EAAmCC,OAAnC,EAA4C;AAC1C,MAAIC,GAAG,GAAG,IAAV;AACA,MAAIC,KAAK,GAAG,OAAOR,KAAP,KAAiB,QAA7B;AACA,MAAIS,KAAK,GAAG,OAAOT,KAAP,KAAiB,QAA7B;;AAEA,MAAIQ,KAAJ,EAAW;AACTD,IAAAA,GAAG,GAAG,QAAN;AACD,GAFD,MAEO,IAAIE,KAAJ,EAAW;AAChBF,IAAAA,GAAG,GAAG,QAAN;AACD;;AAED,MAAI,CAACA,GAAL,EAAU;AACR,WAAO,KAAP;AACD,GAbyC,CAaxC;;;AAGF,MAAI,OAAOH,IAAI,CAACM,GAAZ,KAAoB,WAApB,IAAmC,OAAON,IAAI,CAACO,GAAZ,KAAoB,WAA3D,EAAwE;AACtE,QAAIC,GAAG,GAAGZ,KAAV;AACA,QAAIW,GAAG,GAAGE,MAAM,CAACT,IAAI,CAACO,GAAN,CAAhB;AACA,QAAID,GAAG,GAAGG,MAAM,CAACT,IAAI,CAACM,GAAN,CAAhB;;AAEA,QAAID,KAAJ,EAAW;AACTG,MAAAA,GAAG,GAAGC,MAAM,CAACD,GAAD,CAAZ;AACD;;AAED,QAAIA,GAAG,GAAGF,GAAV,EAAe;AACbL,MAAAA,MAAM,CAACS,IAAP,CAAYZ,IAAI,CAACa,MAAL,CAAYT,OAAO,CAACU,QAAR,CAAiBT,GAAjB,EAAsBG,GAAlC,EAAuCN,IAAI,CAACa,SAAL,IAAkBb,IAAI,CAACc,KAA9D,EAAqEd,IAAI,CAACM,GAA1E,CAAZ;AACD,KAFD,MAEO,IAAIE,GAAG,GAAGD,GAAV,EAAe;AACpBN,MAAAA,MAAM,CAACS,IAAP,CAAYZ,IAAI,CAACa,MAAL,CAAYT,OAAO,CAACU,QAAR,CAAiBT,GAAjB,EAAsBI,GAAlC,EAAuCP,IAAI,CAACa,SAAL,IAAkBb,IAAI,CAACc,KAA9D,EAAqEd,IAAI,CAACO,GAA1E,CAAZ;AACD;AACF;AACF;;AAED,IAAIQ,QAAQ,GAAGhB,IAAf;AACAJ,OAAO,CAACE,OAAR,GAAkBkB,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar util = _interopRequireWildcard(require(\"../util\"));\n\n/**\n *  Rule for validating minimum and maximum allowed values.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction size(rule, value, errors, options) {\n  var key = null;\n  var isNum = typeof value === 'number';\n  var isStr = typeof value === 'string';\n\n  if (isNum) {\n    key = 'number';\n  } else if (isStr) {\n    key = 'string';\n  }\n\n  if (!key) {\n    return false;\n  } // TODO: 2.x change to typeof rule.min === 'number' || typeof rule.max === 'number'\n\n\n  if (typeof rule.min !== 'undefined' || typeof rule.max !== 'undefined') {\n    var val = value;\n    var max = Number(rule.max);\n    var min = Number(rule.min);\n\n    if (isStr) {\n      val = Number(val);\n    }\n\n    if (val < min) {\n      errors.push(util.format(options.messages[key].min, rule.aliasName || rule.field, rule.min));\n    } else if (val > max) {\n      errors.push(util.format(options.messages[key].max, rule.aliasName || rule.field, rule.max));\n    }\n  }\n}\n\nvar _default = size;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}