{"ast":null,"code":"import moment from 'moment';\nimport { KEYCODE } from '../../util';\nexport var PANEL = {\n  TIME: 'time-panel',\n  DATE: 'date-panel'\n};\nexport var DEFAULT_TIME_FORMAT = 'HH:mm:ss';\nexport function isFunction(obj) {\n  return !!(obj && obj.constructor && obj.call && obj.apply);\n}\n/**\n * 将 source 的 time 替换为 target 的 time\n * @param {Object} source 输入值\n * @param {Object} target 目标值\n */\n\nexport function resetValueTime(source, target) {\n  if (!moment.isMoment(source) || !moment.isMoment(target)) {\n    return source;\n  }\n\n  return source.clone().hour(target.hour()).minute(target.minute()).second(target.second());\n}\nexport function formatDateValue(value, format) {\n  var val = typeof value === 'string' ? moment(value, format, false) : value;\n\n  if (val && moment.isMoment(val) && val.isValid()) {\n    return val;\n  }\n\n  return null;\n}\nexport function checkDateValue(props, propName, componentName) {\n  // 支持传入 moment 对象或字符串，字符串不检测是否为日期字符串\n  if (props[propName] && !moment.isMoment(props[propName]) && typeof props[propName] !== 'string') {\n    return new Error('Invalid prop ' + propName + ' supplied to ' + componentName + '. Required a moment object or format date string!');\n  }\n}\nexport function getDateTimeFormat(format, showTime, type) {\n  if (!format && type) {\n    format = {\n      date: 'YYYY-MM-DD',\n      month: 'YYYY-MM',\n      year: 'YYYY',\n      time: ''\n    }[type];\n  }\n\n  var timeFormat = showTime ? showTime.format || DEFAULT_TIME_FORMAT : '';\n  var dateTimeFormat = timeFormat ? format + ' ' + timeFormat : format;\n  return {\n    format: format,\n    timeFormat: timeFormat,\n    dateTimeFormat: dateTimeFormat\n  };\n}\nexport function extend(source, target) {\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n/**\n * 监听键盘事件，操作日期字符串\n * @param {KeyboardEvent} e 事件对象\n * @param {Object} param1\n * @param {String} type 类型 year month day\n */\n\nexport function onDateKeydown(e, _ref, type) {\n  var format = _ref.format,\n      dateInputStr = _ref.dateInputStr,\n      value = _ref.value;\n\n  if ([KEYCODE.UP, KEYCODE.DOWN, KEYCODE.PAGE_UP, KEYCODE.PAGE_DOWN].indexOf(e.keyCode) === -1) {\n    return;\n  }\n\n  if (e.altKey && [KEYCODE.PAGE_UP, KEYCODE.PAGE_DOWN].indexOf(e.keyCode) === -1 || e.controlKey || e.shiftKey) {\n    return;\n  }\n\n  var date = moment(dateInputStr, format, true);\n\n  if (date.isValid()) {\n    var stepUnit = e.altKey ? 'year' : 'month';\n\n    switch (e.keyCode) {\n      case KEYCODE.UP:\n        date.subtract(1, type);\n        break;\n\n      case KEYCODE.DOWN:\n        date.add(1, type);\n        break;\n\n      case KEYCODE.PAGE_UP:\n        date.subtract(1, stepUnit);\n        break;\n\n      case KEYCODE.PAGE_DOWN:\n        date.add(1, stepUnit);\n        break;\n    }\n  } else if (value) {\n    date = value.clone();\n  } else {\n    date = moment();\n  }\n\n  e.preventDefault();\n  return date.format(format);\n}\n/**\n * 监听键盘事件，操作时间\n * @param {KeyboardEvent} e\n * @param {Object} param1\n * @param {String} type second hour minute\n */\n\nexport function onTimeKeydown(e, _ref2, type) {\n  var format = _ref2.format,\n      timeInputStr = _ref2.timeInputStr,\n      steps = _ref2.steps,\n      value = _ref2.value;\n  if ([KEYCODE.UP, KEYCODE.DOWN, KEYCODE.PAGE_UP, KEYCODE.PAGE_DOWN].indexOf(e.keyCode) === -1) return;\n  if (e.altKey && [KEYCODE.PAGE_UP, KEYCODE.PAGE_DOWN].indexOf(e.keyCode) === -1 || e.controlKey || e.shiftKey) return;\n  var time = moment(timeInputStr, format, true);\n\n  if (time.isValid()) {\n    var stepUnit = e.altKey ? 'hour' : 'minute';\n\n    switch (e.keyCode) {\n      case KEYCODE.UP:\n        time.subtract(steps[type], type);\n        break;\n\n      case KEYCODE.DOWN:\n        time.add(steps[type], type);\n        break;\n\n      case KEYCODE.PAGE_UP:\n        time.subtract(steps[stepUnit], stepUnit);\n        break;\n\n      case KEYCODE.PAGE_DOWN:\n        time.add(steps[stepUnit], stepUnit);\n        break;\n    }\n  } else if (value) {\n    time = value.clone();\n  } else {\n    time = moment().hours(0).minutes(0).seconds(0);\n  }\n\n  e.preventDefault();\n  return time.format(format);\n}","map":{"version":3,"sources":["/Users/Chris/Project/lunch-order-backstage/node_modules/@alifd/next/es/date-picker/util/index.js"],"names":["moment","KEYCODE","PANEL","TIME","DATE","DEFAULT_TIME_FORMAT","isFunction","obj","constructor","call","apply","resetValueTime","source","target","isMoment","clone","hour","minute","second","formatDateValue","value","format","val","isValid","checkDateValue","props","propName","componentName","Error","getDateTimeFormat","showTime","type","date","month","year","time","timeFormat","dateTimeFormat","extend","key","hasOwnProperty","onDateKeydown","e","_ref","dateInputStr","UP","DOWN","PAGE_UP","PAGE_DOWN","indexOf","keyCode","altKey","controlKey","shiftKey","stepUnit","subtract","add","preventDefault","onTimeKeydown","_ref2","timeInputStr","steps","hours","minutes","seconds"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport { KEYCODE } from '../../util';\n\nexport var PANEL = {\n    TIME: 'time-panel',\n    DATE: 'date-panel'\n};\n\nexport var DEFAULT_TIME_FORMAT = 'HH:mm:ss';\n\nexport function isFunction(obj) {\n    return !!(obj && obj.constructor && obj.call && obj.apply);\n}\n\n/**\n * 将 source 的 time 替换为 target 的 time\n * @param {Object} source 输入值\n * @param {Object} target 目标值\n */\nexport function resetValueTime(source, target) {\n    if (!moment.isMoment(source) || !moment.isMoment(target)) {\n        return source;\n    }\n    return source.clone().hour(target.hour()).minute(target.minute()).second(target.second());\n}\n\nexport function formatDateValue(value, format) {\n    var val = typeof value === 'string' ? moment(value, format, false) : value;\n    if (val && moment.isMoment(val) && val.isValid()) {\n        return val;\n    }\n\n    return null;\n}\n\nexport function checkDateValue(props, propName, componentName) {\n    // 支持传入 moment 对象或字符串，字符串不检测是否为日期字符串\n    if (props[propName] && !moment.isMoment(props[propName]) && typeof props[propName] !== 'string') {\n        return new Error('Invalid prop ' + propName + ' supplied to ' + componentName + '. Required a moment object or format date string!');\n    }\n}\n\nexport function getDateTimeFormat(format, showTime, type) {\n    if (!format && type) {\n        format = {\n            date: 'YYYY-MM-DD',\n            month: 'YYYY-MM',\n            year: 'YYYY',\n            time: ''\n        }[type];\n    }\n    var timeFormat = showTime ? showTime.format || DEFAULT_TIME_FORMAT : '';\n    var dateTimeFormat = timeFormat ? format + ' ' + timeFormat : format;\n    return {\n        format: format,\n        timeFormat: timeFormat,\n        dateTimeFormat: dateTimeFormat\n    };\n}\n\nexport function extend(source, target) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\n\n/**\n * 监听键盘事件，操作日期字符串\n * @param {KeyboardEvent} e 事件对象\n * @param {Object} param1\n * @param {String} type 类型 year month day\n */\nexport function onDateKeydown(e, _ref, type) {\n    var format = _ref.format,\n        dateInputStr = _ref.dateInputStr,\n        value = _ref.value;\n\n    if ([KEYCODE.UP, KEYCODE.DOWN, KEYCODE.PAGE_UP, KEYCODE.PAGE_DOWN].indexOf(e.keyCode) === -1) {\n        return;\n    }\n\n    if (e.altKey && [KEYCODE.PAGE_UP, KEYCODE.PAGE_DOWN].indexOf(e.keyCode) === -1 || e.controlKey || e.shiftKey) {\n        return;\n    }\n\n    var date = moment(dateInputStr, format, true);\n\n    if (date.isValid()) {\n        var stepUnit = e.altKey ? 'year' : 'month';\n        switch (e.keyCode) {\n            case KEYCODE.UP:\n                date.subtract(1, type);\n                break;\n            case KEYCODE.DOWN:\n                date.add(1, type);\n                break;\n            case KEYCODE.PAGE_UP:\n                date.subtract(1, stepUnit);\n                break;\n            case KEYCODE.PAGE_DOWN:\n                date.add(1, stepUnit);\n                break;\n        }\n    } else if (value) {\n        date = value.clone();\n    } else {\n        date = moment();\n    }\n\n    e.preventDefault();\n    return date.format(format);\n}\n\n/**\n * 监听键盘事件，操作时间\n * @param {KeyboardEvent} e\n * @param {Object} param1\n * @param {String} type second hour minute\n */\nexport function onTimeKeydown(e, _ref2, type) {\n    var format = _ref2.format,\n        timeInputStr = _ref2.timeInputStr,\n        steps = _ref2.steps,\n        value = _ref2.value;\n\n    if ([KEYCODE.UP, KEYCODE.DOWN, KEYCODE.PAGE_UP, KEYCODE.PAGE_DOWN].indexOf(e.keyCode) === -1) return;\n    if (e.altKey && [KEYCODE.PAGE_UP, KEYCODE.PAGE_DOWN].indexOf(e.keyCode) === -1 || e.controlKey || e.shiftKey) return;\n\n    var time = moment(timeInputStr, format, true);\n\n    if (time.isValid()) {\n        var stepUnit = e.altKey ? 'hour' : 'minute';\n        switch (e.keyCode) {\n            case KEYCODE.UP:\n                time.subtract(steps[type], type);\n                break;\n            case KEYCODE.DOWN:\n                time.add(steps[type], type);\n                break;\n            case KEYCODE.PAGE_UP:\n                time.subtract(steps[stepUnit], stepUnit);\n                break;\n            case KEYCODE.PAGE_DOWN:\n                time.add(steps[stepUnit], stepUnit);\n                break;\n        }\n    } else if (value) {\n        time = value.clone();\n    } else {\n        time = moment().hours(0).minutes(0).seconds(0);\n    }\n\n    e.preventDefault();\n    return time.format(format);\n}"]},"metadata":{},"sourceType":"module"}