{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Children } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport shallowElementEquals from 'shallow-element-equals';\nimport { log, obj, dom, events } from '../util';\nimport LockRow from './lock/row';\nimport LockBody from './lock/body';\nimport LockHeader from './lock/header';\nimport LockWrapper from './fixed/wrapper';\nimport { statics, setStickyStyle } from './util';\nexport default function stickyLock(BaseComponent) {\n  var _class, _temp;\n  /** Table */\n\n\n  var LockTable = (_temp = _class = function (_React$Component) {\n    _inherits(LockTable, _React$Component);\n\n    function LockTable(props, context) {\n      _classCallCheck(this, LockTable);\n\n      var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n      _this.state = {};\n\n      _this.updateOffsetArr = function () {\n        var _ref = _this.splitChildren || {},\n            lockLeftChildren = _ref.lockLeftChildren,\n            lockRightChildren = _ref.lockRightChildren,\n            originChildren = _ref.originChildren;\n\n        var leftLen = _this.getFlatenChildren(lockLeftChildren).length;\n\n        var rightLen = _this.getFlatenChildren(lockRightChildren).length;\n\n        var totalLen = leftLen + rightLen + _this.getFlatenChildren(originChildren).length;\n\n        var hasLockLeft = leftLen > 0;\n        var hasLockRight = rightLen > 0;\n\n        var leftOffsetArr = _this.getStickyWidth(lockLeftChildren, 'left', totalLen);\n\n        var rightOffsetArr = _this.getStickyWidth(lockRightChildren, 'right', totalLen);\n\n        var state = {};\n\n        if ('' + leftOffsetArr !== '' + _this.state.leftOffsetArr) {\n          state.leftOffsetArr = leftOffsetArr;\n        }\n\n        if ('' + rightOffsetArr !== '' + _this.state.rightOffsetArr) {\n          state.rightOffsetArr = rightOffsetArr;\n        }\n\n        if (hasLockLeft !== _this.state.hasLockLeft) {\n          state.hasLockLeft = hasLockLeft;\n        }\n\n        if (hasLockRight !== _this.state.hasLockRight) {\n          state.hasLockRight = hasLockRight;\n        }\n\n        if (Object.keys(state).length > 0) {\n          _this.setState(state);\n        }\n      };\n\n      _this.onLockBodyScroll = function (e, forceSet) {\n        var _ref2 = e.currentTarget || {},\n            scrollLeft = _ref2.scrollLeft,\n            scrollWidth = _ref2.scrollWidth,\n            clientWidth = _ref2.clientWidth;\n\n        var pingRight = _this.pingRight,\n            pingLeft = _this.pingLeft;\n        var pingLeftNext = scrollLeft > 0 && _this.state.hasLockLeft;\n        var pingRightNext = scrollLeft < scrollWidth - clientWidth && _this.state.hasLockRight;\n\n        if (forceSet || pingLeft !== pingLeftNext || pingRight !== pingRightNext) {\n          var prefix = _this.props.prefix;\n\n          var table = _this.getTableNode();\n\n          _this.pingLeft = pingLeftNext;\n          _this.pingRight = pingRightNext;\n          var leftFunc = pingLeftNext ? 'addClass' : 'removeClass';\n          dom[leftFunc](table, prefix + 'table-ping-left');\n          var rightFunc = pingRightNext ? 'addClass' : 'removeClass';\n          dom[rightFunc](table, prefix + 'table-ping-right');\n        }\n      };\n\n      _this.getStickyWidth = function (lockChildren, dir, totalLen) {\n        var _this$props = _this.props,\n            dataSource = _this$props.dataSource,\n            scrollToRow = _this$props.scrollToRow;\n        var offsetArr = [];\n\n        var flatenChildren = _this.getFlatenChildren(lockChildren);\n\n        var len = flatenChildren.length;\n        flatenChildren.reduce(function (ret, col, index) {\n          var tag = dir === 'left' ? index : len - 1 - index;\n          var tagNext = dir === 'left' ? tag - 1 : tag + 1;\n          var nodeToGetWidth = dir === 'left' ? tag - 1 : totalLen - index;\n\n          if (dir === 'left' && tag === 0) {\n            ret[0] = 0;\n            return ret;\n          } else if (dir === 'right' && tag === len - 1) {\n            ret[tag] = 0;\n            return ret;\n          } // header with no dataSource\n\n\n          var isEmpty = !(dataSource && dataSource.length > 0); // no header\n\n          var node = isEmpty ? _this.getHeaderCellNode(0, nodeToGetWidth) : _this.getCellNode(scrollToRow || dataSource[0] && dataSource[0].__rowIndex || 0, nodeToGetWidth);\n          var colWidth = node && parseFloat(getComputedStyle(node).width) || 0;\n          ret[tag] = (ret[tagNext] || 0) + colWidth;\n          return ret;\n        }, offsetArr);\n        return offsetArr;\n      };\n\n      _this.getTableInstance = function (type, instance) {\n        type = '';\n        _this['table' + type + 'Inc'] = instance;\n      };\n\n      _this.getNode = function (type, node) {\n        _this[type + 'Node'] = node;\n      };\n\n      _this.getFlatenChildren = function () {\n        var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        var loop = function loop(arr) {\n          var newArray = [];\n          arr.forEach(function (child) {\n            if (child.children) {\n              newArray.push.apply(newArray, loop(child.children));\n            } else {\n              newArray.push(child);\n            }\n          });\n          return newArray;\n        };\n\n        return loop(children);\n      };\n\n      _this.state = {\n        hasLockLeft: true,\n        hasLockRight: true\n      };\n      _this.pingLeft = false;\n      _this.pingRight = false;\n      return _this;\n    }\n\n    LockTable.prototype.getChildContext = function getChildContext() {\n      return {\n        getTableInstance: this.getTableInstance,\n        getLockNode: this.getNode,\n        onLockBodyScroll: this.onLockBodyScroll\n      };\n    };\n\n    LockTable.prototype.componentDidMount = function componentDidMount() {\n      var dataSource = this.props.dataSource;\n      var isEmpty = !(dataSource && dataSource.length > 0);\n      this.updateOffsetArr();\n      this.onLockBodyScroll(isEmpty ? {\n        currentTarget: this.headerNode\n      } : {\n        currentTarget: this.bodyNode\n      });\n      this.forceUpdate();\n      events.on(window, 'resize', this.updateOffsetArr);\n    };\n\n    LockTable.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState, nextContext) {\n      if (nextProps.pure) {\n        var isEqual = shallowElementEquals(nextProps, this.props);\n        return !(isEqual && obj.shallowEqual(nextContext, this.context));\n      }\n\n      return true;\n    };\n\n    LockTable.prototype.componentDidUpdate = function componentDidUpdate() {\n      this.updateOffsetArr();\n      this.onLockBodyScroll(this.bodyNode ? {\n        currentTarget: this.bodyNode\n      } : {\n        currentTarget: this.headerNode\n      }, true);\n    };\n\n    LockTable.prototype.componentWillUnmount = function componentWillUnmount() {\n      this.pingLeft = false;\n      this.pingRight = false;\n      events.off(window, 'resize', this.updateOffsetArr);\n    };\n\n    LockTable.prototype.normalizeChildrenState = function normalizeChildrenState(props) {\n      var columns = this.normalizeChildren(props);\n      this.splitChildren = this.splitFromNormalizeChildren(columns);\n      return this.mergeFromSplitLockChildren(this.splitChildren, props.prefix);\n    }; // 将React结构化数据提取props转换成数组\n\n\n    LockTable.prototype.normalizeChildren = function normalizeChildren(props) {\n      var children = props.children,\n          columns = props.columns;\n      var isLock = false,\n          ret = void 0;\n\n      var getChildren = function getChildren(children) {\n        var ret = [];\n        Children.forEach(children, function (child) {\n          if (child) {\n            var _props = _extends({}, child.props);\n\n            if ([true, 'left', 'right'].indexOf(_props.lock) > -1) {\n              isLock = true;\n\n              if (!('width' in _props)) {\n                log.warning('Should config width for lock column named [ ' + _props.dataIndex + ' ].');\n              }\n            }\n\n            ret.push(_props);\n\n            if (child.props.children) {\n              _props.children = getChildren(child.props.children);\n            }\n          }\n        });\n        return ret;\n      };\n\n      if (columns && !children) {\n        ret = columns;\n        isLock = columns.find(function (record) {\n          return [true, 'left', 'right'].indexOf(record.lock) > -1;\n        });\n      } else {\n        ret = getChildren(children);\n      }\n\n      ret.forEach(function (child) {\n        // 为自定义的列特殊处理\n        if (child.__normalized && isLock) {\n          // users can set lock type for column selection now, so its origin lock type comes first\n          child.lock = child.lock || 'left';\n          delete child.__normalized;\n        }\n      });\n      return ret;\n    };\n    /**\n     * 从数组中分离出lock的列和正常的列\n     * @param {Array} children\n     * @return {Object} { lockLeftChildren, lockRightChildren, originChildren } 锁左列, 锁左列, 剩余列\n     */\n\n\n    LockTable.prototype.splitFromNormalizeChildren = function splitFromNormalizeChildren(children) {\n      var originChildren = deepCopy(children);\n      var lockLeftChildren = deepCopy(children);\n      var lockRightChildren = deepCopy(children);\n\n      var loop = function loop(lockChildren, condition) {\n        var ret = [];\n        lockChildren.forEach(function (child) {\n          if (child.children) {\n            var res = loop(child.children, condition);\n\n            if (!res.length) {\n              ret.push(child);\n            }\n          } else {\n            var order = condition(child);\n\n            if (!order) {\n              ret.push(child);\n            }\n          }\n        });\n        ret.forEach(function (res) {\n          var index = lockChildren.indexOf(res);\n          lockChildren.splice(index, 1);\n        });\n        return lockChildren;\n      };\n\n      loop(lockLeftChildren, function (child) {\n        if (child.lock === true || child.lock === 'left') {\n          return 'left';\n        }\n      });\n      loop(lockRightChildren, function (child) {\n        if (child.lock === 'right') {\n          return 'right';\n        }\n      });\n      loop(originChildren, function (child) {\n        return child.lock !== true && child.lock !== 'left' && child.lock !== 'right';\n      });\n      return {\n        lockLeftChildren: lockLeftChildren,\n        lockRightChildren: lockRightChildren,\n        originChildren: originChildren\n      };\n    };\n    /**\n     * 将左侧的锁列树和中间的普通树及右侧的锁列树进行合并\n     * 会在原始 originChildren 上做改动\n     * @param {Object} splitChildren { lockLeftChildren, lockRightChildren, originChildren }\n     * @return {Array} originChildren\n     */\n\n\n    LockTable.prototype.mergeFromSplitLockChildren = function mergeFromSplitLockChildren(splitChildren, prefix) {\n      var lockLeftChildren = splitChildren.lockLeftChildren,\n          lockRightChildren = splitChildren.lockRightChildren;\n      var originChildren = splitChildren.originChildren;\n      var flatenLeftChildren = this.getFlatenChildren(lockLeftChildren);\n      var flatenRightChildren = this.getFlatenChildren(lockRightChildren);\n      setStickyStyle(lockLeftChildren, flatenLeftChildren, 'left', this.state.leftOffsetArr, prefix);\n      setStickyStyle(lockRightChildren, flatenRightChildren, 'right', this.state.rightOffsetArr, prefix);\n      return [].concat(lockLeftChildren, originChildren, lockRightChildren);\n    };\n\n    LockTable.prototype.getCellNode = function getCellNode(index, i) {\n      var table = this.tableInc;\n\n      try {\n        // in case of finding an unmounted component due to cached data\n        // need to clear refs of table when dataSource Changed\n        // use try catch for temporary\n        return findDOMNode(table.getCellRef(index, i));\n      } catch (error) {\n        return null;\n      }\n    };\n\n    LockTable.prototype.getTableNode = function getTableNode() {\n      var table = this.tableInc;\n\n      try {\n        // in case of finding an unmounted component due to cached data\n        // need to clear refs of table when dataSource Changed\n        // use try catch for temporary\n        return findDOMNode(table.tableEl);\n      } catch (error) {\n        return null;\n      }\n    };\n\n    LockTable.prototype.getHeaderCellNode = function getHeaderCellNode(index, i) {\n      var table = this.tableInc;\n\n      try {\n        // in case of finding an unmounted component due to cached data\n        // need to clear refs of table when dataSource Changed\n        // use try catch for temporary\n        return findDOMNode(table.getHeaderCellRef(index, i));\n      } catch (error) {\n        return null;\n      }\n    };\n\n    LockTable.prototype.render = function render() {\n      var _classnames;\n      /* eslint-disable no-unused-vars, prefer-const */\n\n\n      var _props2 = this.props,\n          children = _props2.children,\n          columns = _props2.columns,\n          prefix = _props2.prefix,\n          components = _props2.components,\n          scrollToRow = _props2.scrollToRow,\n          className = _props2.className,\n          dataSource = _props2.dataSource,\n          others = _objectWithoutProperties(_props2, ['children', 'columns', 'prefix', 'components', 'scrollToRow', 'className', 'dataSource']);\n\n      var normalizedChildren = this.normalizeChildrenState(this.props);\n      components = _extends({}, components);\n      components.Body = components.Body || LockBody;\n      components.Header = components.Header || LockHeader;\n      components.Wrapper = components.Wrapper || LockWrapper;\n      components.Row = components.Row || LockRow;\n      className = classnames((_classnames = {}, _classnames[prefix + 'table-lock'] = true, _classnames[prefix + 'table-stickylock'] = true, _classnames[prefix + 'table-wrap-empty'] = !dataSource.length, _classnames[className] = className, _classnames));\n      return React.createElement(BaseComponent, _extends({}, others, {\n        dataSource: dataSource,\n        columns: normalizedChildren,\n        prefix: prefix,\n        components: components,\n        className: className\n      }));\n    };\n\n    return LockTable;\n  }(React.Component), _class.LockRow = LockRow, _class.LockBody = LockBody, _class.LockHeader = LockHeader, _class.propTypes = _extends({\n    scrollToCol: PropTypes.number,\n\n    /**\n     * 指定滚动到某一行，仅在`useVirtual`的时候生效\n     */\n    scrollToRow: PropTypes.number\n  }, BaseComponent.propTypes), _class.defaultProps = _extends({}, BaseComponent.defaultProps), _class.childContextTypes = {\n    getTableInstance: PropTypes.func,\n    getLockNode: PropTypes.func,\n    onLockBodyScroll: PropTypes.func\n  }, _temp);\n  LockTable.displayName = 'LockTable';\n  statics(LockTable, BaseComponent);\n  return LockTable;\n}\n\nfunction deepCopy(arr) {\n  var copy = function copy(arr) {\n    return arr.map(function (item) {\n      var newItem = _extends({}, item);\n\n      if (item.children) {\n        item.children = copy(item.children);\n      }\n\n      return newItem;\n    });\n  };\n\n  return copy(arr);\n}","map":{"version":3,"sources":["/Users/Chris/Project/lunch-order-backstage/node_modules/@alifd/next/es/table/new-lock.js"],"names":["_objectWithoutProperties","_extends","_classCallCheck","_possibleConstructorReturn","_inherits","React","Children","findDOMNode","PropTypes","classnames","shallowElementEquals","log","obj","dom","events","LockRow","LockBody","LockHeader","LockWrapper","statics","setStickyStyle","stickyLock","BaseComponent","_class","_temp","LockTable","_React$Component","props","context","_this","call","state","updateOffsetArr","_ref","splitChildren","lockLeftChildren","lockRightChildren","originChildren","leftLen","getFlatenChildren","length","rightLen","totalLen","hasLockLeft","hasLockRight","leftOffsetArr","getStickyWidth","rightOffsetArr","Object","keys","setState","onLockBodyScroll","e","forceSet","_ref2","currentTarget","scrollLeft","scrollWidth","clientWidth","pingRight","pingLeft","pingLeftNext","pingRightNext","prefix","table","getTableNode","leftFunc","rightFunc","lockChildren","dir","_this$props","dataSource","scrollToRow","offsetArr","flatenChildren","len","reduce","ret","col","index","tag","tagNext","nodeToGetWidth","isEmpty","node","getHeaderCellNode","getCellNode","__rowIndex","colWidth","parseFloat","getComputedStyle","width","getTableInstance","type","instance","getNode","children","arguments","undefined","loop","arr","newArray","forEach","child","push","apply","prototype","getChildContext","getLockNode","componentDidMount","headerNode","bodyNode","forceUpdate","on","window","shouldComponentUpdate","nextProps","nextState","nextContext","pure","isEqual","shallowEqual","componentDidUpdate","componentWillUnmount","off","normalizeChildrenState","columns","normalizeChildren","splitFromNormalizeChildren","mergeFromSplitLockChildren","isLock","getChildren","_props","indexOf","lock","warning","dataIndex","find","record","__normalized","deepCopy","condition","res","order","splice","flatenLeftChildren","flatenRightChildren","concat","i","tableInc","getCellRef","error","tableEl","getHeaderCellRef","render","_classnames","_props2","components","className","others","normalizedChildren","Body","Header","Wrapper","Row","createElement","Component","propTypes","scrollToCol","number","defaultProps","childContextTypes","func","displayName","copy","map","item","newItem"],"mappings":"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","sourcesContent":["import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Children } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport shallowElementEquals from 'shallow-element-equals';\nimport { log, obj, dom, events } from '../util';\nimport LockRow from './lock/row';\nimport LockBody from './lock/body';\nimport LockHeader from './lock/header';\nimport LockWrapper from './fixed/wrapper';\nimport { statics, setStickyStyle } from './util';\n\nexport default function stickyLock(BaseComponent) {\n    var _class, _temp;\n\n    /** Table */\n    var LockTable = (_temp = _class = function (_React$Component) {\n        _inherits(LockTable, _React$Component);\n\n        function LockTable(props, context) {\n            _classCallCheck(this, LockTable);\n\n            var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n            _this.state = {};\n\n            _this.updateOffsetArr = function () {\n                var _ref = _this.splitChildren || {},\n                    lockLeftChildren = _ref.lockLeftChildren,\n                    lockRightChildren = _ref.lockRightChildren,\n                    originChildren = _ref.originChildren;\n\n                var leftLen = _this.getFlatenChildren(lockLeftChildren).length;\n                var rightLen = _this.getFlatenChildren(lockRightChildren).length;\n                var totalLen = leftLen + rightLen + _this.getFlatenChildren(originChildren).length;\n\n                var hasLockLeft = leftLen > 0;\n                var hasLockRight = rightLen > 0;\n\n                var leftOffsetArr = _this.getStickyWidth(lockLeftChildren, 'left', totalLen);\n                var rightOffsetArr = _this.getStickyWidth(lockRightChildren, 'right', totalLen);\n\n                var state = {};\n\n                if ('' + leftOffsetArr !== '' + _this.state.leftOffsetArr) {\n                    state.leftOffsetArr = leftOffsetArr;\n                }\n\n                if ('' + rightOffsetArr !== '' + _this.state.rightOffsetArr) {\n                    state.rightOffsetArr = rightOffsetArr;\n                }\n\n                if (hasLockLeft !== _this.state.hasLockLeft) {\n                    state.hasLockLeft = hasLockLeft;\n                }\n\n                if (hasLockRight !== _this.state.hasLockRight) {\n                    state.hasLockRight = hasLockRight;\n                }\n\n                if (Object.keys(state).length > 0) {\n                    _this.setState(state);\n                }\n            };\n\n            _this.onLockBodyScroll = function (e, forceSet) {\n                var _ref2 = e.currentTarget || {},\n                    scrollLeft = _ref2.scrollLeft,\n                    scrollWidth = _ref2.scrollWidth,\n                    clientWidth = _ref2.clientWidth;\n\n                var pingRight = _this.pingRight,\n                    pingLeft = _this.pingLeft;\n\n\n                var pingLeftNext = scrollLeft > 0 && _this.state.hasLockLeft;\n                var pingRightNext = scrollLeft < scrollWidth - clientWidth && _this.state.hasLockRight;\n\n                if (forceSet || pingLeft !== pingLeftNext || pingRight !== pingRightNext) {\n                    var prefix = _this.props.prefix;\n\n                    var table = _this.getTableNode();\n\n                    _this.pingLeft = pingLeftNext;\n                    _this.pingRight = pingRightNext;\n\n                    var leftFunc = pingLeftNext ? 'addClass' : 'removeClass';\n                    dom[leftFunc](table, prefix + 'table-ping-left');\n                    var rightFunc = pingRightNext ? 'addClass' : 'removeClass';\n                    dom[rightFunc](table, prefix + 'table-ping-right');\n                }\n            };\n\n            _this.getStickyWidth = function (lockChildren, dir, totalLen) {\n                var _this$props = _this.props,\n                    dataSource = _this$props.dataSource,\n                    scrollToRow = _this$props.scrollToRow;\n\n                var offsetArr = [];\n                var flatenChildren = _this.getFlatenChildren(lockChildren);\n                var len = flatenChildren.length;\n\n                flatenChildren.reduce(function (ret, col, index) {\n                    var tag = dir === 'left' ? index : len - 1 - index;\n                    var tagNext = dir === 'left' ? tag - 1 : tag + 1;\n                    var nodeToGetWidth = dir === 'left' ? tag - 1 : totalLen - index;\n\n                    if (dir === 'left' && tag === 0) {\n                        ret[0] = 0;\n                        return ret;\n                    } else if (dir === 'right' && tag === len - 1) {\n                        ret[tag] = 0;\n                        return ret;\n                    }\n\n                    // header with no dataSource\n                    var isEmpty = !(dataSource && dataSource.length > 0);\n                    // no header\n                    var node = isEmpty ? _this.getHeaderCellNode(0, nodeToGetWidth) : _this.getCellNode(scrollToRow || dataSource[0] && dataSource[0].__rowIndex || 0, nodeToGetWidth);\n                    var colWidth = node && parseFloat(getComputedStyle(node).width) || 0;\n\n                    ret[tag] = (ret[tagNext] || 0) + colWidth;\n                    return ret;\n                }, offsetArr);\n\n                return offsetArr;\n            };\n\n            _this.getTableInstance = function (type, instance) {\n                type = '';\n                _this['table' + type + 'Inc'] = instance;\n            };\n\n            _this.getNode = function (type, node) {\n                _this[type + 'Node'] = node;\n            };\n\n            _this.getFlatenChildren = function () {\n                var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n                var loop = function loop(arr) {\n                    var newArray = [];\n                    arr.forEach(function (child) {\n                        if (child.children) {\n                            newArray.push.apply(newArray, loop(child.children));\n                        } else {\n                            newArray.push(child);\n                        }\n                    });\n                    return newArray;\n                };\n\n                return loop(children);\n            };\n\n            _this.state = {\n                hasLockLeft: true,\n                hasLockRight: true\n            };\n\n            _this.pingLeft = false;\n            _this.pingRight = false;\n            return _this;\n        }\n\n        LockTable.prototype.getChildContext = function getChildContext() {\n            return {\n                getTableInstance: this.getTableInstance,\n                getLockNode: this.getNode,\n                onLockBodyScroll: this.onLockBodyScroll\n            };\n        };\n\n        LockTable.prototype.componentDidMount = function componentDidMount() {\n            var dataSource = this.props.dataSource;\n\n            var isEmpty = !(dataSource && dataSource.length > 0);\n\n            this.updateOffsetArr();\n            this.onLockBodyScroll(isEmpty ? { currentTarget: this.headerNode } : { currentTarget: this.bodyNode });\n            this.forceUpdate();\n\n            events.on(window, 'resize', this.updateOffsetArr);\n        };\n\n        LockTable.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState, nextContext) {\n            if (nextProps.pure) {\n                var isEqual = shallowElementEquals(nextProps, this.props);\n                return !(isEqual && obj.shallowEqual(nextContext, this.context));\n            }\n\n            return true;\n        };\n\n        LockTable.prototype.componentDidUpdate = function componentDidUpdate() {\n            this.updateOffsetArr();\n            this.onLockBodyScroll(this.bodyNode ? { currentTarget: this.bodyNode } : { currentTarget: this.headerNode }, true);\n        };\n\n        LockTable.prototype.componentWillUnmount = function componentWillUnmount() {\n            this.pingLeft = false;\n            this.pingRight = false;\n            events.off(window, 'resize', this.updateOffsetArr);\n        };\n\n        LockTable.prototype.normalizeChildrenState = function normalizeChildrenState(props) {\n            var columns = this.normalizeChildren(props);\n\n            this.splitChildren = this.splitFromNormalizeChildren(columns);\n\n            return this.mergeFromSplitLockChildren(this.splitChildren, props.prefix);\n        };\n\n        // 将React结构化数据提取props转换成数组\n\n\n        LockTable.prototype.normalizeChildren = function normalizeChildren(props) {\n            var children = props.children,\n                columns = props.columns;\n\n            var isLock = false,\n                ret = void 0;\n            var getChildren = function getChildren(children) {\n                var ret = [];\n                Children.forEach(children, function (child) {\n                    if (child) {\n                        var _props = _extends({}, child.props);\n                        if ([true, 'left', 'right'].indexOf(_props.lock) > -1) {\n                            isLock = true;\n                            if (!('width' in _props)) {\n                                log.warning('Should config width for lock column named [ ' + _props.dataIndex + ' ].');\n                            }\n                        }\n                        ret.push(_props);\n                        if (child.props.children) {\n                            _props.children = getChildren(child.props.children);\n                        }\n                    }\n                });\n                return ret;\n            };\n\n            if (columns && !children) {\n                ret = columns;\n                isLock = columns.find(function (record) {\n                    return [true, 'left', 'right'].indexOf(record.lock) > -1;\n                });\n            } else {\n                ret = getChildren(children);\n            }\n            ret.forEach(function (child) {\n                // 为自定义的列特殊处理\n                if (child.__normalized && isLock) {\n                    // users can set lock type for column selection now, so its origin lock type comes first\n                    child.lock = child.lock || 'left';\n                    delete child.__normalized;\n                }\n            });\n            return ret;\n        };\n\n        /**\n         * 从数组中分离出lock的列和正常的列\n         * @param {Array} children\n         * @return {Object} { lockLeftChildren, lockRightChildren, originChildren } 锁左列, 锁左列, 剩余列\n         */\n\n\n        LockTable.prototype.splitFromNormalizeChildren = function splitFromNormalizeChildren(children) {\n            var originChildren = deepCopy(children);\n            var lockLeftChildren = deepCopy(children);\n            var lockRightChildren = deepCopy(children);\n            var loop = function loop(lockChildren, condition) {\n                var ret = [];\n                lockChildren.forEach(function (child) {\n                    if (child.children) {\n                        var res = loop(child.children, condition);\n                        if (!res.length) {\n                            ret.push(child);\n                        }\n                    } else {\n                        var order = condition(child);\n                        if (!order) {\n                            ret.push(child);\n                        }\n                    }\n                });\n                ret.forEach(function (res) {\n                    var index = lockChildren.indexOf(res);\n                    lockChildren.splice(index, 1);\n                });\n                return lockChildren;\n            };\n            loop(lockLeftChildren, function (child) {\n                if (child.lock === true || child.lock === 'left') {\n                    return 'left';\n                }\n            });\n            loop(lockRightChildren, function (child) {\n                if (child.lock === 'right') {\n                    return 'right';\n                }\n            });\n            loop(originChildren, function (child) {\n                return child.lock !== true && child.lock !== 'left' && child.lock !== 'right';\n            });\n            return {\n                lockLeftChildren: lockLeftChildren,\n                lockRightChildren: lockRightChildren,\n                originChildren: originChildren\n            };\n        };\n\n        /**\n         * 将左侧的锁列树和中间的普通树及右侧的锁列树进行合并\n         * 会在原始 originChildren 上做改动\n         * @param {Object} splitChildren { lockLeftChildren, lockRightChildren, originChildren }\n         * @return {Array} originChildren\n         */\n\n\n        LockTable.prototype.mergeFromSplitLockChildren = function mergeFromSplitLockChildren(splitChildren, prefix) {\n            var lockLeftChildren = splitChildren.lockLeftChildren,\n                lockRightChildren = splitChildren.lockRightChildren;\n            var originChildren = splitChildren.originChildren;\n\n\n            var flatenLeftChildren = this.getFlatenChildren(lockLeftChildren);\n            var flatenRightChildren = this.getFlatenChildren(lockRightChildren);\n\n            setStickyStyle(lockLeftChildren, flatenLeftChildren, 'left', this.state.leftOffsetArr, prefix);\n            setStickyStyle(lockRightChildren, flatenRightChildren, 'right', this.state.rightOffsetArr, prefix);\n\n            return [].concat(lockLeftChildren, originChildren, lockRightChildren);\n        };\n\n        LockTable.prototype.getCellNode = function getCellNode(index, i) {\n            var table = this.tableInc;\n\n            try {\n                // in case of finding an unmounted component due to cached data\n                // need to clear refs of table when dataSource Changed\n                // use try catch for temporary\n                return findDOMNode(table.getCellRef(index, i));\n            } catch (error) {\n                return null;\n            }\n        };\n\n        LockTable.prototype.getTableNode = function getTableNode() {\n            var table = this.tableInc;\n            try {\n                // in case of finding an unmounted component due to cached data\n                // need to clear refs of table when dataSource Changed\n                // use try catch for temporary\n                return findDOMNode(table.tableEl);\n            } catch (error) {\n                return null;\n            }\n        };\n\n        LockTable.prototype.getHeaderCellNode = function getHeaderCellNode(index, i) {\n            var table = this.tableInc;\n\n            try {\n                // in case of finding an unmounted component due to cached data\n                // need to clear refs of table when dataSource Changed\n                // use try catch for temporary\n                return findDOMNode(table.getHeaderCellRef(index, i));\n            } catch (error) {\n                return null;\n            }\n        };\n\n        LockTable.prototype.render = function render() {\n            var _classnames;\n\n            /* eslint-disable no-unused-vars, prefer-const */\n            var _props2 = this.props,\n                children = _props2.children,\n                columns = _props2.columns,\n                prefix = _props2.prefix,\n                components = _props2.components,\n                scrollToRow = _props2.scrollToRow,\n                className = _props2.className,\n                dataSource = _props2.dataSource,\n                others = _objectWithoutProperties(_props2, ['children', 'columns', 'prefix', 'components', 'scrollToRow', 'className', 'dataSource']);\n\n            var normalizedChildren = this.normalizeChildrenState(this.props);\n\n            components = _extends({}, components);\n            components.Body = components.Body || LockBody;\n            components.Header = components.Header || LockHeader;\n            components.Wrapper = components.Wrapper || LockWrapper;\n            components.Row = components.Row || LockRow;\n            className = classnames((_classnames = {}, _classnames[prefix + 'table-lock'] = true, _classnames[prefix + 'table-stickylock'] = true, _classnames[prefix + 'table-wrap-empty'] = !dataSource.length, _classnames[className] = className, _classnames));\n\n            return React.createElement(BaseComponent, _extends({}, others, {\n                dataSource: dataSource,\n                columns: normalizedChildren,\n                prefix: prefix,\n                components: components,\n                className: className\n            }));\n        };\n\n        return LockTable;\n    }(React.Component), _class.LockRow = LockRow, _class.LockBody = LockBody, _class.LockHeader = LockHeader, _class.propTypes = _extends({\n        scrollToCol: PropTypes.number,\n        /**\n         * 指定滚动到某一行，仅在`useVirtual`的时候生效\n         */\n        scrollToRow: PropTypes.number\n    }, BaseComponent.propTypes), _class.defaultProps = _extends({}, BaseComponent.defaultProps), _class.childContextTypes = {\n        getTableInstance: PropTypes.func,\n        getLockNode: PropTypes.func,\n        onLockBodyScroll: PropTypes.func\n    }, _temp);\n    LockTable.displayName = 'LockTable';\n\n    statics(LockTable, BaseComponent);\n    return LockTable;\n}\n\nfunction deepCopy(arr) {\n    var copy = function copy(arr) {\n        return arr.map(function (item) {\n            var newItem = _extends({}, item);\n            if (item.children) {\n                item.children = copy(item.children);\n            }\n            return newItem;\n        });\n    };\n    return copy(arr);\n}"]},"metadata":{},"sourceType":"module"}