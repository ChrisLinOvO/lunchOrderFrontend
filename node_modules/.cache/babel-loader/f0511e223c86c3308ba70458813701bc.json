{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp2;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../../icon';\nimport { KEYCODE } from '../../util';\nimport CellComponent from '../base/cell';\nvar TreeCell = (_temp2 = _class = function (_React$Component) {\n  _inherits(TreeCell, _React$Component);\n\n  function TreeCell() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TreeCell);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onTreeNodeClick = function (record, e) {\n      e.stopPropagation();\n\n      _this.context.onTreeNodeClick(record);\n    }, _this.expandedKeydown = function (record, e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (e.keyCode === KEYCODE.ENTER) {\n        _this.onTreeNodeClick(record, e);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  TreeCell.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props = this.props,\n        colIndex = _props.colIndex,\n        record = _props.record,\n        prefix = _props.prefix,\n        primaryKey = _props.primaryKey,\n        locale = _props.locale,\n        rtl = _props.rtl,\n        children = _props.children;\n    var _context = this.context,\n        openRowKeys = _context.openTreeRowKeys,\n        indent = _context.indent,\n        isTree = _context.isTree,\n        rowSelection = _context.rowSelection;\n    var treeArrowNodeIndex = rowSelection ? 1 : 0;\n    var firstCellStyle = void 0,\n        treeArrowNode = void 0;\n\n    if (colIndex === treeArrowNodeIndex) {\n      var treeArrowType = void 0;\n\n      if (isTree) {\n        var _firstCellStyle;\n\n        var paddingType = rtl ? 'paddingRight' : 'paddingLeft';\n        firstCellStyle = (_firstCellStyle = {}, _firstCellStyle[paddingType] = indent * (record.__level + 1), _firstCellStyle);\n        treeArrowNode = React.createElement(Icon, {\n          size: 'xs',\n          rtl: rtl,\n          className: prefix + 'table-tree-placeholder'\n        });\n\n        if (record.children && record.children.length) {\n          var hasExpanded = openRowKeys.indexOf(record[primaryKey]) > -1;\n          treeArrowType = hasExpanded ? 'arrow-down' : 'arrow-right';\n          treeArrowNode = React.createElement(Icon, {\n            className: prefix + 'table-tree-arrow',\n            type: treeArrowType,\n            size: 'xs',\n            rtl: rtl,\n            onClick: function onClick(e) {\n              return _this2.onTreeNodeClick(record, e);\n            },\n            onKeyDown: function onKeyDown(e) {\n              return _this2.expandedKeydown(record, e);\n            },\n            role: 'button',\n            tabIndex: '0',\n            'aria-expanded': hasExpanded,\n            'aria-label': hasExpanded ? locale.expanded : locale.folded\n          });\n        }\n      }\n    }\n\n    return React.createElement(CellComponent, _extends({}, this.props, {\n      innerStyle: firstCellStyle,\n      isIconLeft: !!treeArrowNode\n    }), children, treeArrowNode);\n  };\n\n  return TreeCell;\n}(React.Component), _class.propTypes = _extends({\n  indent: PropTypes.number,\n  locale: PropTypes.object\n}, CellComponent.propTypes), _class.defaultProps = _extends({}, CellComponent.defaultProps, {\n  component: 'td',\n  indent: 20\n}), _class.contextTypes = {\n  openTreeRowKeys: PropTypes.array,\n  indent: PropTypes.number,\n  onTreeNodeClick: PropTypes.func,\n  isTree: PropTypes.bool,\n  rowSelection: PropTypes.object\n}, _temp2);\nTreeCell.displayName = 'TreeCell';\nexport { TreeCell as default };","map":{"version":3,"sources":["/Users/Chris/Project/lunch-order-backstage/node_modules/@alifd/next/es/table/tree/cell.js"],"names":["_extends","_classCallCheck","_possibleConstructorReturn","_inherits","_class","_temp2","React","PropTypes","Icon","KEYCODE","CellComponent","TreeCell","_React$Component","_temp","_this","_ret","_len","arguments","length","args","Array","_key","call","apply","concat","onTreeNodeClick","record","e","stopPropagation","context","expandedKeydown","preventDefault","keyCode","ENTER","prototype","render","_this2","_props","props","colIndex","prefix","primaryKey","locale","rtl","children","_context","openRowKeys","openTreeRowKeys","indent","isTree","rowSelection","treeArrowNodeIndex","firstCellStyle","treeArrowNode","treeArrowType","_firstCellStyle","paddingType","__level","createElement","size","className","hasExpanded","indexOf","type","onClick","onKeyDown","role","tabIndex","expanded","folded","innerStyle","isIconLeft","Component","propTypes","number","object","defaultProps","component","contextTypes","array","func","bool","displayName","default"],"mappings":"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","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp2;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../../icon';\nimport { KEYCODE } from '../../util';\nimport CellComponent from '../base/cell';\n\nvar TreeCell = (_temp2 = _class = function (_React$Component) {\n    _inherits(TreeCell, _React$Component);\n\n    function TreeCell() {\n        var _temp, _this, _ret;\n\n        _classCallCheck(this, TreeCell);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onTreeNodeClick = function (record, e) {\n            e.stopPropagation();\n            _this.context.onTreeNodeClick(record);\n        }, _this.expandedKeydown = function (record, e) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (e.keyCode === KEYCODE.ENTER) {\n                _this.onTreeNodeClick(record, e);\n            }\n        }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    TreeCell.prototype.render = function render() {\n        var _this2 = this;\n\n        var _props = this.props,\n            colIndex = _props.colIndex,\n            record = _props.record,\n            prefix = _props.prefix,\n            primaryKey = _props.primaryKey,\n            locale = _props.locale,\n            rtl = _props.rtl,\n            children = _props.children;\n        var _context = this.context,\n            openRowKeys = _context.openTreeRowKeys,\n            indent = _context.indent,\n            isTree = _context.isTree,\n            rowSelection = _context.rowSelection;\n\n        var treeArrowNodeIndex = rowSelection ? 1 : 0;\n        var firstCellStyle = void 0,\n            treeArrowNode = void 0;\n        if (colIndex === treeArrowNodeIndex) {\n            var treeArrowType = void 0;\n            if (isTree) {\n                var _firstCellStyle;\n\n                var paddingType = rtl ? 'paddingRight' : 'paddingLeft';\n                firstCellStyle = (_firstCellStyle = {}, _firstCellStyle[paddingType] = indent * (record.__level + 1), _firstCellStyle);\n                treeArrowNode = React.createElement(Icon, {\n                    size: 'xs',\n                    rtl: rtl,\n                    className: prefix + 'table-tree-placeholder'\n                });\n                if (record.children && record.children.length) {\n                    var hasExpanded = openRowKeys.indexOf(record[primaryKey]) > -1;\n\n                    treeArrowType = hasExpanded ? 'arrow-down' : 'arrow-right';\n\n                    treeArrowNode = React.createElement(Icon, {\n                        className: prefix + 'table-tree-arrow',\n                        type: treeArrowType,\n                        size: 'xs',\n                        rtl: rtl,\n                        onClick: function onClick(e) {\n                            return _this2.onTreeNodeClick(record, e);\n                        },\n                        onKeyDown: function onKeyDown(e) {\n                            return _this2.expandedKeydown(record, e);\n                        },\n                        role: 'button',\n                        tabIndex: '0',\n                        'aria-expanded': hasExpanded,\n                        'aria-label': hasExpanded ? locale.expanded : locale.folded\n                    });\n                }\n            }\n        }\n        return React.createElement(\n            CellComponent,\n            _extends({}, this.props, {\n                innerStyle: firstCellStyle,\n                isIconLeft: !!treeArrowNode\n            }),\n            children,\n            treeArrowNode\n        );\n    };\n\n    return TreeCell;\n}(React.Component), _class.propTypes = _extends({\n    indent: PropTypes.number,\n    locale: PropTypes.object\n}, CellComponent.propTypes), _class.defaultProps = _extends({}, CellComponent.defaultProps, {\n    component: 'td',\n    indent: 20\n}), _class.contextTypes = {\n    openTreeRowKeys: PropTypes.array,\n    indent: PropTypes.number,\n    onTreeNodeClick: PropTypes.func,\n    isTree: PropTypes.bool,\n    rowSelection: PropTypes.object\n}, _temp2);\nTreeCell.displayName = 'TreeCell';\nexport { TreeCell as default };"]},"metadata":{},"sourceType":"module"}