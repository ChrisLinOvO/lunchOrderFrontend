{"ast":null,"code":"export { _off as off };\n/**\n * 取消事件绑定\n * @param  {*}   node       DOM节点或任何可以绑定事件的对象\n * @param  {String}   eventName  事件名\n * @param  {Function} callback   回调方法\n * @param  {Boolean}   [useCapture=false] 是否开启事件捕获优先\n */\n\nfunction _off(node, eventName, callback, useCapture) {\n  /* istanbul ignore else */\n  if (node.removeEventListener) {\n    node.removeEventListener(eventName, callback, useCapture || false);\n  }\n}\n/**\n * 绑定事件\n * @param  {*}   node       DOM节点或任何可以绑定事件的对象\n * @param  {String}   eventName  事件名\n * @param  {Function} callback   回调方法\n * @param  {Boolean}   useCapture 是否开启事件捕获优先\n * @return {Object}               返回的object中包含一个off方法，用于取消事件监听\n *\n * @example\n * const handler = events.on(document.body, 'click', e => {\n *     // handle click ...\n * });\n * // 取消事件绑定\n * handler.off();\n */\n\n\nexport function on(node, eventName, callback, useCapture) {\n  /* istanbul ignore else */\n  if (node.addEventListener) {\n    node.addEventListener(eventName, callback, useCapture || false);\n  }\n\n  return {\n    off: function off() {\n      return _off(node, eventName, callback, useCapture);\n    }\n  };\n}\n/**\n * 绑定事件，只执行一次后销毁\n * @param  {*}   node       DOM节点或任何可以绑定事件的对象\n * @param  {String}   eventName  事件名\n * @param  {Function} callback   回调方法\n * @param  {Boolean}   useCapture 是否开启事件捕获优先\n * @return {Function}             返回的object中包含一个off方法，用于取消事件监听\n */\n\nexport function once(node, eventName, callback, useCapture) {\n  return on(node, eventName, function __fn() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    callback.apply(this, args); // 由于addEventListener中的参数options只在Chrome 55、Firefox(Gecko)以上版本支持，故还是用传统的方法实现once\n\n    _off(node, eventName, __fn, useCapture);\n  }, useCapture);\n}","map":{"version":3,"sources":["/Users/Chris/Project/lunch-order-backstage/node_modules/@alifd/next/es/util/events.js"],"names":["_off","off","node","eventName","callback","useCapture","removeEventListener","on","addEventListener","once","__fn","_len","arguments","length","args","Array","_key","apply"],"mappings":"AAAA,SAASA,IAAI,IAAIC,GAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,IAAT,CAAcE,IAAd,EAAoBC,SAApB,EAA+BC,QAA/B,EAAyCC,UAAzC,EAAqD;AACjD;AACA,MAAIH,IAAI,CAACI,mBAAT,EAA8B;AAC1BJ,IAAAA,IAAI,CAACI,mBAAL,CAAyBH,SAAzB,EAAoCC,QAApC,EAA8CC,UAAU,IAAI,KAA5D;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASE,EAAT,CAAYL,IAAZ,EAAkBC,SAAlB,EAA6BC,QAA7B,EAAuCC,UAAvC,EAAmD;AACtD;AACA,MAAIH,IAAI,CAACM,gBAAT,EAA2B;AACvBN,IAAAA,IAAI,CAACM,gBAAL,CAAsBL,SAAtB,EAAiCC,QAAjC,EAA2CC,UAAU,IAAI,KAAzD;AACH;;AAED,SAAO;AACHJ,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAChB,aAAOD,IAAI,CAACE,IAAD,EAAOC,SAAP,EAAkBC,QAAlB,EAA4BC,UAA5B,CAAX;AACH;AAHE,GAAP;AAKH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,IAAT,CAAcP,IAAd,EAAoBC,SAApB,EAA+BC,QAA/B,EAAyCC,UAAzC,EAAqD;AACxD,SAAOE,EAAE,CAACL,IAAD,EAAOC,SAAP,EAAkB,SAASO,IAAT,GAAgB;AACvC,SAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAGC,KAAK,CAACJ,IAAD,CAAzC,EAAiDK,IAAI,GAAG,CAA7D,EAAgEA,IAAI,GAAGL,IAAvE,EAA6EK,IAAI,EAAjF,EAAqF;AACjFF,MAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACH;;AAEDZ,IAAAA,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBH,IAArB,EALuC,CAOvC;;AACAd,IAAAA,IAAI,CAACE,IAAD,EAAOC,SAAP,EAAkBO,IAAlB,EAAwBL,UAAxB,CAAJ;AACH,GATQ,EASNA,UATM,CAAT;AAUH","sourcesContent":["export { _off as off };\n/**\n * 取消事件绑定\n * @param  {*}   node       DOM节点或任何可以绑定事件的对象\n * @param  {String}   eventName  事件名\n * @param  {Function} callback   回调方法\n * @param  {Boolean}   [useCapture=false] 是否开启事件捕获优先\n */\nfunction _off(node, eventName, callback, useCapture) {\n    /* istanbul ignore else */\n    if (node.removeEventListener) {\n        node.removeEventListener(eventName, callback, useCapture || false);\n    }\n}\n\n/**\n * 绑定事件\n * @param  {*}   node       DOM节点或任何可以绑定事件的对象\n * @param  {String}   eventName  事件名\n * @param  {Function} callback   回调方法\n * @param  {Boolean}   useCapture 是否开启事件捕获优先\n * @return {Object}               返回的object中包含一个off方法，用于取消事件监听\n *\n * @example\n * const handler = events.on(document.body, 'click', e => {\n *     // handle click ...\n * });\n * // 取消事件绑定\n * handler.off();\n */\nexport function on(node, eventName, callback, useCapture) {\n    /* istanbul ignore else */\n    if (node.addEventListener) {\n        node.addEventListener(eventName, callback, useCapture || false);\n    }\n\n    return {\n        off: function off() {\n            return _off(node, eventName, callback, useCapture);\n        }\n    };\n}\n\n/**\n * 绑定事件，只执行一次后销毁\n * @param  {*}   node       DOM节点或任何可以绑定事件的对象\n * @param  {String}   eventName  事件名\n * @param  {Function} callback   回调方法\n * @param  {Boolean}   useCapture 是否开启事件捕获优先\n * @return {Function}             返回的object中包含一个off方法，用于取消事件监听\n */\nexport function once(node, eventName, callback, useCapture) {\n    return on(node, eventName, function __fn() {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        callback.apply(this, args);\n\n        // 由于addEventListener中的参数options只在Chrome 55、Firefox(Gecko)以上版本支持，故还是用传统的方法实现once\n        _off(node, eventName, __fn, useCapture);\n    }, useCapture);\n}"]},"metadata":{},"sourceType":"module"}