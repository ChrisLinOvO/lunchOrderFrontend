{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp2;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { log } from '../../util';\nimport Row from '../lock/row';\nvar ExpandedRow = (_temp2 = _class = function (_React$Component) {\n  _inherits(ExpandedRow, _React$Component);\n\n  function ExpandedRow() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ExpandedRow);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.getExpandedRow = function (parentKey, ref) {\n      var getExpandedRowRef = _this.context.getExpandedRowRef;\n      getExpandedRowRef && getExpandedRowRef(parentKey, ref);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  ExpandedRow.prototype.renderExpandedRow = function renderExpandedRow(record, rowIndex) {\n    var _context = this.context,\n        expandedRowRender = _context.expandedRowRender,\n        expandedRowIndent = _context.expandedRowIndent,\n        openRowKeys = _context.openRowKeys,\n        lockType = _context.lockType,\n        expandedIndexSimulate = _context.expandedIndexSimulate,\n        expandedRowWidthEquals2Table = _context.expandedRowWidthEquals2Table;\n    var expandedIndex = expandedIndexSimulate ? (rowIndex - 1) / 2 : rowIndex;\n    var _props = this.props,\n        columns = _props.columns,\n        cellRef = _props.cellRef;\n    var colSpan = columns.length;\n    var expandedCols = columns[0] && columns[0].__colIndex || 0;\n\n    if (expandedRowRender) {\n      var _props2 = this.props,\n          primaryKey = _props2.primaryKey,\n          prefix = _props2.prefix,\n          leftIndent = expandedRowIndent[0],\n          rightIndent = expandedRowIndent[1],\n          totalIndent = leftIndent + rightIndent,\n          renderCols = function renderCols(number) {\n        var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var ret = [];\n\n        var _loop = function _loop(i) {\n          ret.push(React.createElement('td', {\n            key: i,\n            ref: function ref(cell) {\n              return cellRef(rowIndex, i + start, cell);\n            }\n          }, '\\xA0'));\n        };\n\n        for (var i = 0; i < number; i++) {\n          _loop(i);\n        }\n\n        return ret;\n      };\n\n      var content = void 0;\n\n      if (totalIndent > colSpan && !lockType) {\n        log.warning(\"It's not allowed expandedRowIndent is more than the number of columns.\");\n      }\n\n      if (leftIndent < columns.length && lockType === 'left') {\n        log.warning('expandedRowIndent left is less than the number of left lock columns.');\n      }\n\n      if (rightIndent < columns.length && lockType === 'right') {\n        log.warning('expandedRowIndent right is less than the number of right lock columns.');\n      }\n\n      if (lockType) {\n        return openRowKeys.indexOf(record[primaryKey]) > -1 ? React.createElement('tr', {\n          className: prefix + 'table-expanded-row',\n          key: 'expanded-' + expandedIndex\n        }, React.createElement('td', {\n          colSpan: colSpan,\n          ref: function ref(cell) {\n            return cellRef(rowIndex, expandedCols, cell);\n          }\n        }, '\\xA0')) : null;\n      }\n\n      var expandedRowStyle = {\n        position: 'sticky',\n        left: 0\n      }; // 暴露给用户的index\n\n      content = expandedRowRender(record, expandedIndex);\n\n      if (!React.isValidElement(content)) {\n        content = React.createElement('div', {\n          className: prefix + 'table-cell-wrapper',\n          ref: this.getExpandedRow.bind(this, record[primaryKey]),\n          style: expandedRowWidthEquals2Table && expandedRowStyle\n        }, content);\n      } else {\n        content = expandedRowWidthEquals2Table ? React.createElement('div', {\n          className: prefix + 'table-expanded-area',\n          ref: this.getExpandedRow.bind(this, record[primaryKey]),\n          style: expandedRowStyle\n        }, content) : content;\n      }\n\n      var rightStart = columns.length;\n      columns.forEach(function (col) {\n        col.lock === 'right' && rightStart--;\n      });\n      return openRowKeys.indexOf(record[primaryKey]) > -1 ? React.createElement('tr', {\n        className: prefix + 'table-expanded-row',\n        key: 'expanded-' + (record[primaryKey] || expandedIndex)\n      }, renderCols(leftIndent), React.createElement('td', {\n        colSpan: colSpan - totalIndent\n      }, content), renderCols(rightIndent, rightStart)) : null;\n    } else {\n      return null;\n    }\n  };\n\n  ExpandedRow.prototype.render = function render() {\n    /* eslint-disable no-unused-vars*/\n    var _props3 = this.props,\n        record = _props3.record,\n        rowIndex = _props3.rowIndex,\n        columns = _props3.columns,\n        others = _objectWithoutProperties(_props3, ['record', 'rowIndex', 'columns']);\n\n    var expandedIndexSimulate = this.context.expandedIndexSimulate;\n\n    if (record.__expanded) {\n      return this.renderExpandedRow(record, rowIndex, columns);\n    }\n\n    var newRowIndex = expandedIndexSimulate ? rowIndex / 2 : rowIndex;\n    return React.createElement(Row, _extends({}, others, {\n      record: record,\n      columns: columns,\n      __rowIndex: rowIndex,\n      rowIndex: newRowIndex\n    }));\n  };\n\n  return ExpandedRow;\n}(React.Component), _class.propTypes = _extends({}, Row.propTypes), _class.defaultProps = _extends({}, Row.defaultProps), _class.contextTypes = {\n  openRowKeys: PropTypes.array,\n  expandedRowRender: PropTypes.func,\n  expandedRowIndent: PropTypes.array,\n  expandedIndexSimulate: PropTypes.bool,\n  expandedRowWidthEquals2Table: PropTypes.bool,\n  lockType: PropTypes.oneOf(['left', 'right']),\n  getExpandedRowRef: PropTypes.func\n}, _temp2);\nExpandedRow.displayName = 'ExpandedRow';\nexport { ExpandedRow as default };","map":{"version":3,"sources":["/Users/Chris/Project/lunch-order-backstage/node_modules/@alifd/next/es/table/expanded/row.js"],"names":["_extends","_objectWithoutProperties","_classCallCheck","_possibleConstructorReturn","_inherits","_class","_temp2","React","PropTypes","log","Row","ExpandedRow","_React$Component","_temp","_this","_ret","_len","arguments","length","args","Array","_key","call","apply","concat","getExpandedRow","parentKey","ref","getExpandedRowRef","context","prototype","renderExpandedRow","record","rowIndex","_context","expandedRowRender","expandedRowIndent","openRowKeys","lockType","expandedIndexSimulate","expandedRowWidthEquals2Table","expandedIndex","_props","props","columns","cellRef","colSpan","expandedCols","__colIndex","_props2","primaryKey","prefix","leftIndent","rightIndent","totalIndent","renderCols","number","start","undefined","ret","_loop","i","push","createElement","key","cell","content","warning","indexOf","className","expandedRowStyle","position","left","isValidElement","bind","style","rightStart","forEach","col","lock","render","_props3","others","__expanded","newRowIndex","__rowIndex","Component","propTypes","defaultProps","contextTypes","array","func","bool","oneOf","displayName","default"],"mappings":"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","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp2;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { log } from '../../util';\nimport Row from '../lock/row';\n\nvar ExpandedRow = (_temp2 = _class = function (_React$Component) {\n    _inherits(ExpandedRow, _React$Component);\n\n    function ExpandedRow() {\n        var _temp, _this, _ret;\n\n        _classCallCheck(this, ExpandedRow);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.getExpandedRow = function (parentKey, ref) {\n            var getExpandedRowRef = _this.context.getExpandedRowRef;\n\n            getExpandedRowRef && getExpandedRowRef(parentKey, ref);\n        }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    ExpandedRow.prototype.renderExpandedRow = function renderExpandedRow(record, rowIndex) {\n        var _context = this.context,\n            expandedRowRender = _context.expandedRowRender,\n            expandedRowIndent = _context.expandedRowIndent,\n            openRowKeys = _context.openRowKeys,\n            lockType = _context.lockType,\n            expandedIndexSimulate = _context.expandedIndexSimulate,\n            expandedRowWidthEquals2Table = _context.expandedRowWidthEquals2Table;\n\n        var expandedIndex = expandedIndexSimulate ? (rowIndex - 1) / 2 : rowIndex;\n\n        var _props = this.props,\n            columns = _props.columns,\n            cellRef = _props.cellRef;\n\n        var colSpan = columns.length;\n        var expandedCols = columns[0] && columns[0].__colIndex || 0;\n\n        if (expandedRowRender) {\n            var _props2 = this.props,\n                primaryKey = _props2.primaryKey,\n                prefix = _props2.prefix,\n                leftIndent = expandedRowIndent[0],\n                rightIndent = expandedRowIndent[1],\n                totalIndent = leftIndent + rightIndent,\n                renderCols = function renderCols(number) {\n                var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n                var ret = [];\n\n                var _loop = function _loop(i) {\n                    ret.push(React.createElement(\n                        'td',\n                        { key: i, ref: function ref(cell) {\n                                return cellRef(rowIndex, i + start, cell);\n                            } },\n                        '\\xA0'\n                    ));\n                };\n\n                for (var i = 0; i < number; i++) {\n                    _loop(i);\n                }\n                return ret;\n            };\n\n            var content = void 0;\n\n            if (totalIndent > colSpan && !lockType) {\n                log.warning(\"It's not allowed expandedRowIndent is more than the number of columns.\");\n            }\n            if (leftIndent < columns.length && lockType === 'left') {\n                log.warning('expandedRowIndent left is less than the number of left lock columns.');\n            }\n            if (rightIndent < columns.length && lockType === 'right') {\n                log.warning('expandedRowIndent right is less than the number of right lock columns.');\n            }\n            if (lockType) {\n                return openRowKeys.indexOf(record[primaryKey]) > -1 ? React.createElement(\n                    'tr',\n                    { className: prefix + 'table-expanded-row', key: 'expanded-' + expandedIndex },\n                    React.createElement(\n                        'td',\n                        { colSpan: colSpan, ref: function ref(cell) {\n                                return cellRef(rowIndex, expandedCols, cell);\n                            } },\n                        '\\xA0'\n                    )\n                ) : null;\n            }\n\n            var expandedRowStyle = {\n                position: 'sticky',\n                left: 0\n            };\n            // 暴露给用户的index\n            content = expandedRowRender(record, expandedIndex);\n            if (!React.isValidElement(content)) {\n                content = React.createElement(\n                    'div',\n                    {\n                        className: prefix + 'table-cell-wrapper',\n                        ref: this.getExpandedRow.bind(this, record[primaryKey]),\n                        style: expandedRowWidthEquals2Table && expandedRowStyle\n                    },\n                    content\n                );\n            } else {\n                content = expandedRowWidthEquals2Table ? React.createElement(\n                    'div',\n                    {\n                        className: prefix + 'table-expanded-area',\n                        ref: this.getExpandedRow.bind(this, record[primaryKey]),\n                        style: expandedRowStyle\n                    },\n                    content\n                ) : content;\n            }\n\n            var rightStart = columns.length;\n            columns.forEach(function (col) {\n                col.lock === 'right' && rightStart--;\n            });\n            return openRowKeys.indexOf(record[primaryKey]) > -1 ? React.createElement(\n                'tr',\n                { className: prefix + 'table-expanded-row', key: 'expanded-' + (record[primaryKey] || expandedIndex) },\n                renderCols(leftIndent),\n                React.createElement(\n                    'td',\n                    { colSpan: colSpan - totalIndent },\n                    content\n                ),\n                renderCols(rightIndent, rightStart)\n            ) : null;\n        } else {\n            return null;\n        }\n    };\n\n    ExpandedRow.prototype.render = function render() {\n        /* eslint-disable no-unused-vars*/\n        var _props3 = this.props,\n            record = _props3.record,\n            rowIndex = _props3.rowIndex,\n            columns = _props3.columns,\n            others = _objectWithoutProperties(_props3, ['record', 'rowIndex', 'columns']);\n\n        var expandedIndexSimulate = this.context.expandedIndexSimulate;\n\n\n        if (record.__expanded) {\n            return this.renderExpandedRow(record, rowIndex, columns);\n        }\n\n        var newRowIndex = expandedIndexSimulate ? rowIndex / 2 : rowIndex;\n        return React.createElement(Row, _extends({}, others, { record: record, columns: columns, __rowIndex: rowIndex, rowIndex: newRowIndex }));\n    };\n\n    return ExpandedRow;\n}(React.Component), _class.propTypes = _extends({}, Row.propTypes), _class.defaultProps = _extends({}, Row.defaultProps), _class.contextTypes = {\n    openRowKeys: PropTypes.array,\n    expandedRowRender: PropTypes.func,\n    expandedRowIndent: PropTypes.array,\n    expandedIndexSimulate: PropTypes.bool,\n    expandedRowWidthEquals2Table: PropTypes.bool,\n    lockType: PropTypes.oneOf(['left', 'right']),\n    getExpandedRowRef: PropTypes.func\n}, _temp2);\nExpandedRow.displayName = 'ExpandedRow';\nexport { ExpandedRow as default };"]},"metadata":{},"sourceType":"module"}