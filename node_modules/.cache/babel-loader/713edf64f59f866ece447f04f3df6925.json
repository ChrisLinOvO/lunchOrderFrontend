{"ast":null,"code":"import KEYCODE from './keycode';\nimport { each } from './object';\n/**\n * 用于切换页面元素的焦点\n */\n\n/**\n * 元素是否可见\n * @private\n * @param   {Element}  node\n * @return  {Boolean}\n */\n\nfunction _isVisible(node) {\n  while (node) {\n    if (node === document.body || node === document.documentElement) {\n      break;\n    }\n\n    if (node.style.display === 'none' || node.style.visibility === 'hidden') {\n      return false;\n    }\n\n    node = node.parentNode;\n  }\n\n  return true;\n}\n/**\n * 元素是否可以获取焦点\n * @private\n * @param   {Element}  node\n * @return  {Boolean}\n */\n\n\nfunction _isFocusable(node) {\n  var nodeName = node.nodeName.toLowerCase();\n  var tabIndex = parseInt(node.getAttribute('tabindex'), 10);\n  var hasTabIndex = !isNaN(tabIndex) && tabIndex > -1;\n\n  if (_isVisible(node)) {\n    if (nodeName === 'input') {\n      return !node.disabled && node.type !== 'hidden';\n    } else if (['select', 'textarea', 'button'].indexOf(nodeName) > -1) {\n      return !node.disabled;\n    } else if (nodeName === 'a') {\n      return node.getAttribute('href') || hasTabIndex;\n    } else {\n      return hasTabIndex;\n    }\n  }\n\n  return false;\n}\n/**\n * 列出能获取焦点的子节点\n * @param  {Element} node 容器节点\n * @return {Array<Element>}\n */\n\n\nexport function getFocusNodeList(node) {\n  var res = [];\n  var nodeList = node.querySelectorAll('*');\n  each(nodeList, function (item) {\n    if (_isFocusable(item)) {\n      var method = item.getAttribute('data-auto-focus') ? 'unshift' : 'push';\n      res[method](item);\n    }\n  });\n\n  if (_isFocusable(node)) {\n    res.unshift(node);\n  }\n\n  return res;\n} // 用于记录上一次获得焦点的无素\n\nvar lastFocusElement = null;\n/**\n * 保存最近一次获得焦点的无素\n */\n\nexport function saveLastFocusNode() {\n  lastFocusElement = document.activeElement;\n}\n/**\n * 清除焦点记录\n */\n\nexport function clearLastFocusNode() {\n  lastFocusElement = null;\n}\n/**\n * 尝试将焦点切换到上一个元素\n */\n\nexport function backLastFocusNode() {\n  if (lastFocusElement) {\n    try {\n      // 元素可能已经被移动了\n      lastFocusElement.focus();\n    } catch (e) {// ignore ...\n    }\n  }\n}\n/**\n * 在限制的范围内切换焦点\n * @param  {Element} node 容器节点\n * @param  {Event} e      键盘事件\n */\n\nexport function limitTabRange(node, e) {\n  if (e.keyCode === KEYCODE.TAB) {\n    var tabNodeList = getFocusNodeList(node);\n    var maxIndex = tabNodeList.length - 1;\n    var index = tabNodeList.indexOf(document.activeElement);\n\n    if (index > -1) {\n      var targetIndex = index + (e.shiftKey ? -1 : 1);\n      targetIndex < 0 && (targetIndex = maxIndex);\n      targetIndex > maxIndex && (targetIndex = 0);\n      tabNodeList[targetIndex].focus();\n      e.preventDefault();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/Chris/Project/lunch-order-backstage/node_modules/@alifd/next/es/util/focus.js"],"names":["KEYCODE","each","_isVisible","node","document","body","documentElement","style","display","visibility","parentNode","_isFocusable","nodeName","toLowerCase","tabIndex","parseInt","getAttribute","hasTabIndex","isNaN","disabled","type","indexOf","getFocusNodeList","res","nodeList","querySelectorAll","item","method","unshift","lastFocusElement","saveLastFocusNode","activeElement","clearLastFocusNode","backLastFocusNode","focus","e","limitTabRange","keyCode","TAB","tabNodeList","maxIndex","length","index","targetIndex","shiftKey","preventDefault"],"mappings":"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","sourcesContent":["import KEYCODE from './keycode';\nimport { each } from './object';\n\n/**\n * 用于切换页面元素的焦点\n */\n\n/**\n * 元素是否可见\n * @private\n * @param   {Element}  node\n * @return  {Boolean}\n */\nfunction _isVisible(node) {\n    while (node) {\n        if (node === document.body || node === document.documentElement) {\n            break;\n        }\n        if (node.style.display === 'none' || node.style.visibility === 'hidden') {\n            return false;\n        }\n        node = node.parentNode;\n    }\n    return true;\n}\n\n/**\n * 元素是否可以获取焦点\n * @private\n * @param   {Element}  node\n * @return  {Boolean}\n */\nfunction _isFocusable(node) {\n    var nodeName = node.nodeName.toLowerCase();\n    var tabIndex = parseInt(node.getAttribute('tabindex'), 10);\n    var hasTabIndex = !isNaN(tabIndex) && tabIndex > -1;\n\n    if (_isVisible(node)) {\n        if (nodeName === 'input') {\n            return !node.disabled && node.type !== 'hidden';\n        } else if (['select', 'textarea', 'button'].indexOf(nodeName) > -1) {\n            return !node.disabled;\n        } else if (nodeName === 'a') {\n            return node.getAttribute('href') || hasTabIndex;\n        } else {\n            return hasTabIndex;\n        }\n    }\n    return false;\n}\n\n/**\n * 列出能获取焦点的子节点\n * @param  {Element} node 容器节点\n * @return {Array<Element>}\n */\nexport function getFocusNodeList(node) {\n    var res = [];\n    var nodeList = node.querySelectorAll('*');\n\n    each(nodeList, function (item) {\n        if (_isFocusable(item)) {\n            var method = item.getAttribute('data-auto-focus') ? 'unshift' : 'push';\n            res[method](item);\n        }\n    });\n\n    if (_isFocusable(node)) {\n        res.unshift(node);\n    }\n\n    return res;\n}\n\n// 用于记录上一次获得焦点的无素\nvar lastFocusElement = null;\n\n/**\n * 保存最近一次获得焦点的无素\n */\nexport function saveLastFocusNode() {\n    lastFocusElement = document.activeElement;\n}\n\n/**\n * 清除焦点记录\n */\nexport function clearLastFocusNode() {\n    lastFocusElement = null;\n}\n\n/**\n * 尝试将焦点切换到上一个元素\n */\nexport function backLastFocusNode() {\n    if (lastFocusElement) {\n        try {\n            // 元素可能已经被移动了\n            lastFocusElement.focus();\n        } catch (e) {\n            // ignore ...\n        }\n    }\n}\n\n/**\n * 在限制的范围内切换焦点\n * @param  {Element} node 容器节点\n * @param  {Event} e      键盘事件\n */\nexport function limitTabRange(node, e) {\n    if (e.keyCode === KEYCODE.TAB) {\n        var tabNodeList = getFocusNodeList(node);\n        var maxIndex = tabNodeList.length - 1;\n        var index = tabNodeList.indexOf(document.activeElement);\n\n        if (index > -1) {\n            var targetIndex = index + (e.shiftKey ? -1 : 1);\n            targetIndex < 0 && (targetIndex = maxIndex);\n            targetIndex > maxIndex && (targetIndex = 0);\n            tabNodeList[targetIndex].focus();\n            e.preventDefault();\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}