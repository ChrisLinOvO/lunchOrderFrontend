{"ast":null,"code":"import { warning } from './log';\nimport { typeOf } from './object';\n/**\n * 将字符串转化为驼峰式写法\n * @param  {String} str 例：-webkit-transition\n * @return {String}     例：WebkitTransition\n */\n\nexport function camelcase(str) {\n  if (!/-/.test(str)) {\n    return str || '';\n  }\n\n  return str.toLowerCase().replace(/-([a-z])/g, function ($0, $1) {\n    return $1.toUpperCase();\n  });\n}\n/**\n * 将驼峰式字符串转化为连字符写法\n * @param  {String} str 例：WebkitTransition\n * @return {String}     例：-webkit-transition\n */\n\nexport function hyphenate(str) {\n  var strType = typeOf(str);\n\n  if (strType !== 'String') {\n    warning('[ hyphenate(str: string): string ] ' + ('Expected arguments[0] to be a string but get a ' + strType + '.') + 'It will return an empty string without any processing.');\n    return '';\n  }\n\n  return str.replace(/([A-Z])/g, function ($0) {\n    return '-' + $0.toLowerCase();\n  });\n}\n/**\n * 替换模板字符串\n * @param {String} tpl     例：当前{current}, 共{total}页\n * @param {Object} object  例：{current: 1, total: 9}\n * @return {String}        例：\n */\n\nexport function template(tpl) {\n  var object = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var tplType = typeOf(tpl);\n\n  if (tplType !== 'String') {\n    warning('[ template(tpl: string, object: object): string ] ' + ('Expected arguments[0] to be a string but get a ' + tplType + '.') + 'It will return an empty string without any processing.');\n    return '';\n  }\n\n  return tpl.replace(/\\{[a-z]*\\}/g, function (str) {\n    var key = str.substring(1, str.length - 1);\n    return object[key] || '';\n  });\n}","map":{"version":3,"sources":["/Users/Chris/Project/lunch-order-backstage/node_modules/@alifd/next/es/util/string.js"],"names":["warning","typeOf","camelcase","str","test","toLowerCase","replace","$0","$1","toUpperCase","hyphenate","strType","template","tpl","object","arguments","length","undefined","tplType","key","substring"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AAC3B,MAAI,CAAC,IAAIC,IAAJ,CAASD,GAAT,CAAL,EAAoB;AAChB,WAAOA,GAAG,IAAI,EAAd;AACH;;AACD,SAAOA,GAAG,CAACE,WAAJ,GAAkBC,OAAlB,CAA0B,WAA1B,EAAuC,UAAUC,EAAV,EAAcC,EAAd,EAAkB;AAC5D,WAAOA,EAAE,CAACC,WAAH,EAAP;AACH,GAFM,CAAP;AAGH;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBP,GAAnB,EAAwB;AAC3B,MAAIQ,OAAO,GAAGV,MAAM,CAACE,GAAD,CAApB;;AACA,MAAIQ,OAAO,KAAK,QAAhB,EAA0B;AACtBX,IAAAA,OAAO,CAAC,yCAAyC,oDAAoDW,OAApD,GAA8D,GAAvG,IAA8G,wDAA/G,CAAP;AACA,WAAO,EAAP;AACH;;AACD,SAAOR,GAAG,CAACG,OAAJ,CAAY,UAAZ,EAAwB,UAAUC,EAAV,EAAc;AACzC,WAAO,MAAMA,EAAE,CAACF,WAAH,EAAb;AACH,GAFM,CAAP;AAGH;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,QAAT,CAAkBC,GAAlB,EAAuB;AAC1B,MAAIC,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAjF;AAEA,MAAIG,OAAO,GAAGjB,MAAM,CAACY,GAAD,CAApB;;AACA,MAAIK,OAAO,KAAK,QAAhB,EAA0B;AACtBlB,IAAAA,OAAO,CAAC,wDAAwD,oDAAoDkB,OAApD,GAA8D,GAAtH,IAA6H,wDAA9H,CAAP;AACA,WAAO,EAAP;AACH;;AAED,SAAOL,GAAG,CAACP,OAAJ,CAAY,aAAZ,EAA2B,UAAUH,GAAV,EAAe;AAC7C,QAAIgB,GAAG,GAAGhB,GAAG,CAACiB,SAAJ,CAAc,CAAd,EAAiBjB,GAAG,CAACa,MAAJ,GAAa,CAA9B,CAAV;AACA,WAAOF,MAAM,CAACK,GAAD,CAAN,IAAe,EAAtB;AACH,GAHM,CAAP;AAIH","sourcesContent":["import { warning } from './log';\nimport { typeOf } from './object';\n\n/**\n * 将字符串转化为驼峰式写法\n * @param  {String} str 例：-webkit-transition\n * @return {String}     例：WebkitTransition\n */\nexport function camelcase(str) {\n    if (!/-/.test(str)) {\n        return str || '';\n    }\n    return str.toLowerCase().replace(/-([a-z])/g, function ($0, $1) {\n        return $1.toUpperCase();\n    });\n}\n\n/**\n * 将驼峰式字符串转化为连字符写法\n * @param  {String} str 例：WebkitTransition\n * @return {String}     例：-webkit-transition\n */\nexport function hyphenate(str) {\n    var strType = typeOf(str);\n    if (strType !== 'String') {\n        warning('[ hyphenate(str: string): string ] ' + ('Expected arguments[0] to be a string but get a ' + strType + '.') + 'It will return an empty string without any processing.');\n        return '';\n    }\n    return str.replace(/([A-Z])/g, function ($0) {\n        return '-' + $0.toLowerCase();\n    });\n}\n\n/**\n * 替换模板字符串\n * @param {String} tpl     例：当前{current}, 共{total}页\n * @param {Object} object  例：{current: 1, total: 9}\n * @return {String}        例：\n */\nexport function template(tpl) {\n    var object = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var tplType = typeOf(tpl);\n    if (tplType !== 'String') {\n        warning('[ template(tpl: string, object: object): string ] ' + ('Expected arguments[0] to be a string but get a ' + tplType + '.') + 'It will return an empty string without any processing.');\n        return '';\n    }\n\n    return tpl.replace(/\\{[a-z]*\\}/g, function (str) {\n        var key = str.substring(1, str.length - 1);\n        return object[key] || '';\n    });\n}"]},"metadata":{},"sourceType":"module"}