{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _typeof from 'babel-runtime/helpers/typeof';\nimport React from 'react';\n/**\n * 获取对象的类型\n * @param  {*} obj\n * @return {String}\n *\n * @example\n * typeOf([]) === 'Array'\n * typeOf() === 'Undefined'\n * typeOf(1) === 'Number'\n */\n\nexport function typeOf(obj) {\n  return Object.prototype.toString.call(obj).replace(/\\[object\\s|]/g, '');\n}\n/**\n * 判断是否是数组或类数组对象\n * @param  {*}  obj\n * @return {Boolean}\n *\n * @example\n * isArrayLike([]) === true\n * isArrayLike(arguments) === true\n * isArrayLike(this.props.children) === true\n */\n\nexport function isArrayLike(obj) {\n  var length = !!obj && 'length' in obj && obj.length;\n  var type = typeOf(obj);\n  return type === 'Array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;\n}\n/**\n * 判断对象是否是一个promise，即是否可以用.then\n * @param  {*}  obj\n * @return {Boolean}\n */\n\nexport function isPromise(obj) {\n  return !!obj && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n/**\n * 是否是一个纯净的对象\n * @param  {*}  obj\n * @return {Boolean}\n * @reference https://github.com/jonschlinkert/is-plain-object\n */\n\nexport function isPlainObject(obj) {\n  if (typeOf(obj) !== 'Object') {\n    return false;\n  }\n\n  var ctor = obj.constructor;\n\n  if (typeof ctor !== 'function') {\n    return false;\n  }\n\n  var prot = ctor.prototype;\n\n  if (typeOf(prot) !== 'Object') {\n    return false;\n  }\n\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * 对象浅比较\n * @param  {Object} objA\n * @param  {Object} objB\n * @param  {Function}  [compare] 手动调用方法比较\n * @return {Boolean}      对象浅比较是否相等\n *\n * @example\n * object.shallowEqual({a: 100}, {a: 100}); // true\n */\n\nexport function shallowEqual(objA, objB, compare) {\n  if (objA === objB) {\n    return true;\n  } // 其中一个不是object，则不相等\n\n\n  if (!objA || !objB || (typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) + (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'objectobject') {\n    return false;\n  }\n\n  var keyA = Object.keys(objA);\n  var keyB = Object.keys(objB);\n  var len = keyA.length; // key 数量不一致则不相等\n\n  if (len !== keyB.length) {\n    return false;\n  }\n\n  var hasCallback = typeof compare === 'function';\n\n  for (var i = 0; i < len; i++) {\n    var key = keyA[i];\n\n    if (!Object.prototype.hasOwnProperty.call(objB, key)) {\n      return false;\n    }\n\n    var valA = objA[key];\n    var valB = objB[key];\n    var ret = hasCallback ? compare(valA, valB, key) : void 0;\n\n    if (ret === false || ret === void 0 && valA !== valB) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * 遍历对象或数组，或者类数组，例如React中的children对象、arguments等\n * @param  {Object|Array}   obj\n * @param  {Function} callback fn(n, i) or fn(val, key)\n * @param  {Number}   [direction = 1] 是否倒序遍历，只对数组有效\n * @return {Object|Array}\n *\n * @example\n * // 遍历数组\n * object.each([100, 200, 300], (n, i) => console.log(n, i));\n * // 遍历json对象\n * object.each({a: 100, b: 200}, (value, key) => console.log(key, value));\n * // 遍历React子节点\n * object.each(this.props.children, (child, index) => console.log(child));\n * // 遍历arguments\n * object.each(arguments, (arg, i) => console.log(arg));\n */\n\nexport function each(obj, callback, direction) {\n  var reversed = direction === -1;\n  var length = obj.length;\n  var value = void 0,\n      i = reversed ? length - 1 : 0;\n\n  if (isArrayLike(obj)) {\n    for (; i < length && i >= 0; reversed ? i-- : i++) {\n      value = callback.call(obj[i], obj[i], i);\n\n      if (value === false) {\n        break;\n      }\n    }\n  } else {\n    for (i in obj) {\n      /* istanbul ignore else */\n      if (obj.hasOwnProperty(i)) {\n        value = callback.call(obj[i], obj[i], i);\n\n        if (value === false) {\n          break;\n        }\n      }\n    }\n  }\n\n  return obj;\n} // @private 判断key是否在数组或对象中\n\nvar _isInObj = function _isInObj(key, obj, isArray) {\n  return isArray ? obj.indexOf(key) > -1 : key in obj;\n};\n/**\n * 过滤出其它属性\n * @param  {Object|Array} holdProps 过滤的参照对象，最终的结果只保留不在参照对象中的key\n * @param  {Object} props     被过滤的对象\n * @return {Object}           others\n *\n * @example\n * object.pickOthers(FooComponent.propTypes, this.props);\n * object.pickOthers(['className', 'onChange'], this.props);\n */\n\n\nexport function pickOthers(holdProps, props) {\n  var others = {};\n  var isArray = typeOf(holdProps) === 'Array';\n\n  for (var key in props) {\n    if (!_isInObj(key, holdProps, isArray)) {\n      others[key] = props[key];\n    }\n  }\n\n  return others;\n}\n/**\n * 过滤出需要的属性\n * @param  {Object|Array} holdProps 过滤的参照对象，最终的结果只保留在参照对象中的key\n * @param  {Object} props     被过滤的对象\n * @return {Object}           others\n *\n * @example\n * object.pickProps(FooComponent.propTypes, this.props);\n * object.pickProps(['className', 'onChange'], this.props);\n */\n\nexport function pickProps(holdProps, props) {\n  var others = {};\n  var isArray = typeOf(holdProps) === 'Array';\n\n  for (var key in props) {\n    if (_isInObj(key, holdProps, isArray)) {\n      others[key] = props[key];\n    }\n  }\n\n  return others;\n}\n/**\n * 过滤出带prefix的属性\n * @param  {Object} holdProps 过滤的参照对象，最终的结果只保留不在参照对象中的key\n * @param  {string} prefix    包含的字符串\n * @return {Object}           others\n *\n * @example\n * object.pickAttrsWith(FooComponent.propTypes, 'data-');\n */\n\nexport function pickAttrsWith(holdProps, prefix) {\n  var others = {};\n\n  for (var key in holdProps) {\n    if (key.match(prefix)) {\n      others[key] = holdProps[key];\n    }\n  }\n\n  return others;\n}\n/**\n * Checks if value is `null` or `undefined`.\n * @param {*} value\n * @return {Boolean}\n */\n\nexport function isNil(value) {\n  // It will returns `true` only if `null` or `undefined` compare with `null`\n  // with loose equaliy\n  return value == null; // eslint-disable-line eqeqeq\n}\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n * @reference https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge?page=1&tab=votes#tab-top\n */\n\nexport function deepMerge(target) {\n  for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  if (!sources.length) return target;\n  var source = sources.shift();\n\n  if (!isPlainObject(target)) {\n    target = {};\n  }\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    for (var key in source) {\n      // 如果是object 进行深拷贝\n      if (isPlainObject(source[key]) && !React.isValidElement(source[key])) {\n        var _extends2;\n\n        if (!target[key]) _extends(target, (_extends2 = {}, _extends2[key] = {}, _extends2)); // fix {a: 'te'}, {a:{b:3}}\n\n        if (!isPlainObject(target[key])) {\n          target[key] = source[key];\n        }\n\n        deepMerge(target[key], source[key]); // string/number/function/react node 等直接复制\n      } else {\n        var _extends3;\n\n        _extends(target, (_extends3 = {}, _extends3[key] = source[key], _extends3));\n      }\n    }\n  }\n\n  return deepMerge.apply(undefined, [target].concat(sources));\n}\n/**\n * 组件是否为 Fucntion Component\n * @param {*} component 传入的组件\n */\n\nexport function isFunctionComponent(component) {\n  return typeOf(component) === 'Function' && component.prototype && component.prototype.isReactComponent === undefined;\n}\n/**\n * 组件是否为 Class Component\n * @param {*} component  传入的组件\n */\n\nexport function isClassComponent(component) {\n  return typeOf(component) === 'Function' && component.prototype && component.prototype.isReactComponent !== undefined;\n}\n/**\n * 判断是否为 ReactFragment\n * @param {*} component  传入的组件\n */\n\nexport function isReactFragment(component) {\n  if (isNil(component)) {\n    return false;\n  }\n\n  if (component.type) {\n    return component.type === React.Fragment;\n  }\n\n  return component === React.Fragment;\n}","map":{"version":3,"sources":["/Users/Chris/Project/lunch-order-backstage/node_modules/@alifd/next/es/util/object.js"],"names":["_extends","_typeof","React","typeOf","obj","Object","prototype","toString","call","replace","isArrayLike","length","type","isPromise","then","isPlainObject","ctor","constructor","prot","hasOwnProperty","shallowEqual","objA","objB","compare","keyA","keys","keyB","len","hasCallback","i","key","valA","valB","ret","each","callback","direction","reversed","value","_isInObj","isArray","indexOf","pickOthers","holdProps","props","others","pickProps","pickAttrsWith","prefix","match","isNil","deepMerge","target","_len","arguments","sources","Array","_key","source","shift","isValidElement","_extends2","_extends3","apply","undefined","concat","isFunctionComponent","component","isReactComponent","isClassComponent","isReactFragment","Fragment"],"mappings":"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","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _typeof from 'babel-runtime/helpers/typeof';\nimport React from 'react';\n\n/**\n * 获取对象的类型\n * @param  {*} obj\n * @return {String}\n *\n * @example\n * typeOf([]) === 'Array'\n * typeOf() === 'Undefined'\n * typeOf(1) === 'Number'\n */\nexport function typeOf(obj) {\n    return Object.prototype.toString.call(obj).replace(/\\[object\\s|]/g, '');\n}\n\n/**\n * 判断是否是数组或类数组对象\n * @param  {*}  obj\n * @return {Boolean}\n *\n * @example\n * isArrayLike([]) === true\n * isArrayLike(arguments) === true\n * isArrayLike(this.props.children) === true\n */\nexport function isArrayLike(obj) {\n    var length = !!obj && 'length' in obj && obj.length;\n    var type = typeOf(obj);\n\n    return type === 'Array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;\n}\n\n/**\n * 判断对象是否是一个promise，即是否可以用.then\n * @param  {*}  obj\n * @return {Boolean}\n */\nexport function isPromise(obj) {\n    return !!obj && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\n/**\n * 是否是一个纯净的对象\n * @param  {*}  obj\n * @return {Boolean}\n * @reference https://github.com/jonschlinkert/is-plain-object\n */\nexport function isPlainObject(obj) {\n    if (typeOf(obj) !== 'Object') {\n        return false;\n    }\n\n    var ctor = obj.constructor;\n\n    if (typeof ctor !== 'function') {\n        return false;\n    }\n\n    var prot = ctor.prototype;\n\n    if (typeOf(prot) !== 'Object') {\n        return false;\n    }\n\n    if (!prot.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * 对象浅比较\n * @param  {Object} objA\n * @param  {Object} objB\n * @param  {Function}  [compare] 手动调用方法比较\n * @return {Boolean}      对象浅比较是否相等\n *\n * @example\n * object.shallowEqual({a: 100}, {a: 100}); // true\n */\nexport function shallowEqual(objA, objB, compare) {\n    if (objA === objB) {\n        return true;\n    }\n\n    // 其中一个不是object，则不相等\n    if (!objA || !objB || (typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) + (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'objectobject') {\n        return false;\n    }\n\n    var keyA = Object.keys(objA);\n    var keyB = Object.keys(objB);\n    var len = keyA.length;\n\n    // key 数量不一致则不相等\n    if (len !== keyB.length) {\n        return false;\n    }\n\n    var hasCallback = typeof compare === 'function';\n\n    for (var i = 0; i < len; i++) {\n        var key = keyA[i];\n\n        if (!Object.prototype.hasOwnProperty.call(objB, key)) {\n            return false;\n        }\n\n        var valA = objA[key];\n        var valB = objB[key];\n\n        var ret = hasCallback ? compare(valA, valB, key) : void 0;\n\n        if (ret === false || ret === void 0 && valA !== valB) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * 遍历对象或数组，或者类数组，例如React中的children对象、arguments等\n * @param  {Object|Array}   obj\n * @param  {Function} callback fn(n, i) or fn(val, key)\n * @param  {Number}   [direction = 1] 是否倒序遍历，只对数组有效\n * @return {Object|Array}\n *\n * @example\n * // 遍历数组\n * object.each([100, 200, 300], (n, i) => console.log(n, i));\n * // 遍历json对象\n * object.each({a: 100, b: 200}, (value, key) => console.log(key, value));\n * // 遍历React子节点\n * object.each(this.props.children, (child, index) => console.log(child));\n * // 遍历arguments\n * object.each(arguments, (arg, i) => console.log(arg));\n */\nexport function each(obj, callback, direction) {\n    var reversed = direction === -1;\n    var length = obj.length;\n    var value = void 0,\n        i = reversed ? length - 1 : 0;\n\n    if (isArrayLike(obj)) {\n        for (; i < length && i >= 0; reversed ? i-- : i++) {\n            value = callback.call(obj[i], obj[i], i);\n\n            if (value === false) {\n                break;\n            }\n        }\n    } else {\n        for (i in obj) {\n            /* istanbul ignore else */\n            if (obj.hasOwnProperty(i)) {\n                value = callback.call(obj[i], obj[i], i);\n\n                if (value === false) {\n                    break;\n                }\n            }\n        }\n    }\n\n    return obj;\n}\n\n// @private 判断key是否在数组或对象中\nvar _isInObj = function _isInObj(key, obj, isArray) {\n    return isArray ? obj.indexOf(key) > -1 : key in obj;\n};\n\n/**\n * 过滤出其它属性\n * @param  {Object|Array} holdProps 过滤的参照对象，最终的结果只保留不在参照对象中的key\n * @param  {Object} props     被过滤的对象\n * @return {Object}           others\n *\n * @example\n * object.pickOthers(FooComponent.propTypes, this.props);\n * object.pickOthers(['className', 'onChange'], this.props);\n */\nexport function pickOthers(holdProps, props) {\n    var others = {};\n    var isArray = typeOf(holdProps) === 'Array';\n\n    for (var key in props) {\n        if (!_isInObj(key, holdProps, isArray)) {\n            others[key] = props[key];\n        }\n    }\n\n    return others;\n}\n\n/**\n * 过滤出需要的属性\n * @param  {Object|Array} holdProps 过滤的参照对象，最终的结果只保留在参照对象中的key\n * @param  {Object} props     被过滤的对象\n * @return {Object}           others\n *\n * @example\n * object.pickProps(FooComponent.propTypes, this.props);\n * object.pickProps(['className', 'onChange'], this.props);\n */\nexport function pickProps(holdProps, props) {\n    var others = {};\n    var isArray = typeOf(holdProps) === 'Array';\n\n    for (var key in props) {\n        if (_isInObj(key, holdProps, isArray)) {\n            others[key] = props[key];\n        }\n    }\n\n    return others;\n}\n\n/**\n * 过滤出带prefix的属性\n * @param  {Object} holdProps 过滤的参照对象，最终的结果只保留不在参照对象中的key\n * @param  {string} prefix    包含的字符串\n * @return {Object}           others\n *\n * @example\n * object.pickAttrsWith(FooComponent.propTypes, 'data-');\n */\nexport function pickAttrsWith(holdProps, prefix) {\n    var others = {};\n\n    for (var key in holdProps) {\n        if (key.match(prefix)) {\n            others[key] = holdProps[key];\n        }\n    }\n\n    return others;\n}\n\n/**\n * Checks if value is `null` or `undefined`.\n * @param {*} value\n * @return {Boolean}\n */\nexport function isNil(value) {\n    // It will returns `true` only if `null` or `undefined` compare with `null`\n    // with loose equaliy\n    return value == null; // eslint-disable-line eqeqeq\n}\n\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n * @reference https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge?page=1&tab=votes#tab-top\n */\nexport function deepMerge(target) {\n    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n    }\n\n    if (!sources.length) return target;\n    var source = sources.shift();\n\n    if (!isPlainObject(target)) {\n        target = {};\n    }\n\n    if (isPlainObject(target) && isPlainObject(source)) {\n        for (var key in source) {\n            // 如果是object 进行深拷贝\n            if (isPlainObject(source[key]) && !React.isValidElement(source[key])) {\n                var _extends2;\n\n                if (!target[key]) _extends(target, (_extends2 = {}, _extends2[key] = {}, _extends2));\n                // fix {a: 'te'}, {a:{b:3}}\n                if (!isPlainObject(target[key])) {\n                    target[key] = source[key];\n                }\n                deepMerge(target[key], source[key]);\n                // string/number/function/react node 等直接复制\n            } else {\n                var _extends3;\n\n                _extends(target, (_extends3 = {}, _extends3[key] = source[key], _extends3));\n            }\n        }\n    }\n\n    return deepMerge.apply(undefined, [target].concat(sources));\n}\n\n/**\n * 组件是否为 Fucntion Component\n * @param {*} component 传入的组件\n */\nexport function isFunctionComponent(component) {\n    return typeOf(component) === 'Function' && component.prototype && component.prototype.isReactComponent === undefined;\n}\n\n/**\n * 组件是否为 Class Component\n * @param {*} component  传入的组件\n */\nexport function isClassComponent(component) {\n    return typeOf(component) === 'Function' && component.prototype && component.prototype.isReactComponent !== undefined;\n}\n\n/**\n * 判断是否为 ReactFragment\n * @param {*} component  传入的组件\n */\nexport function isReactFragment(component) {\n    if (isNil(component)) {\n        return false;\n    }\n\n    if (component.type) {\n        return component.type === React.Fragment;\n    }\n    return component === React.Fragment;\n}"]},"metadata":{},"sourceType":"module"}